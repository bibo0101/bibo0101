import React, { useRef, useEffect, useState } from "react";
import * as d3 from "d3";

interface Node {
  id: string;
  parentId: string | null;
}

interface Link {
  source: string;
  target: string;
}

interface ChartProps {
  nodes: Node[];
  links: Link[];
}
const calculateDimensions = (nodeCount: number) => {
  const baseWidth = 800;  // Minimum width of the chart
  const baseHeight = 600; // Minimum height of the chart
  const nodeWidthIncrement = 50; // Additional width per node
  const nodeHeightIncrement = 30; // Additional height per node

  // Dynamically calculate dimensions based on the number of nodes
  const width = Math.max(baseWidth, nodeCount * nodeWidthIncrement);
  const height = Math.max(baseHeight, nodeCount * nodeHeightIncrement);

  return { width, height };
};

const DynamicGraph: React.FC<ChartProps> = ({ nodes, links }) => {
  const svgRef = useRef<SVGSVGElement | null>(null);
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });

const createSimulation = (nodes: any[], links: any[], width: number, height: number) => {
  const simulation = d3.forceSimulation(nodes)
    .force("link", d3.forceLink(links).id((d: any) => d.id).distance(Math.max(50, width / nodes.length)))
    .force("charge", d3.forceManyBody().strength(-Math.max(30, width / (2 * nodes.length))))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide().radius(40));

  return simulation;
};
const renderGraph = (svg: d3.Selection<SVGGElement, unknown, null, undefined>, simulation: any, nodes: any[], links: any[]) => {
  const link = svg.selectAll(".link")
    .data(links)
    .enter()
    .append("line")
    .attr("class", "link");

  const node = svg.selectAll(".node")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("class", "node")
    .attr("r", 20);

  simulation.on("tick", () => {
    link
      .attr("x1", (d: any) => d.source.x)
      .attr("y1", (d: any) => d.source.y)
      .attr("x2", (d: any) => d.target.x)
      .attr("y2", (d: any) => d.target.y);

    node
      .attr("cx", (d: any) => d.x)
      .attr("cy", (d: any) => d.y);
  });
};

const addZoomAndPan = (svg: d3.Selection<SVGGElement, unknown, null, undefined>) => {
  const zoom = d3.zoom<SVGSVGElement, unknown>().on("zoom", (event) => {
    svg.attr("transform", event.transform);
  });
  svg.call(zoom);
};


  useEffect(() => {
    const nodeCount = nodes.length;
    const { width, height } = calculateDimensions(nodeCount);

    setDimensions({ width, height });

    const svg = d3.select(svgRef.current)
      .attr("width", width)
      .attr("height", height);

    updateSVGDimensions(svg, width, height);

    const simulation = createSimulation(nodes, links, width, height);
    renderGraph(svg.append("g"), simulation, nodes, links);
    addZoomAndPan(svg.select("g"));
  }, [nodes, links]);

  return <svg ref={svgRef}></svg>;
};

export default DynamicGraph;
