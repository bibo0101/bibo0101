const config = {
  displayFields: ['id', 'organization', 'country'], // List of fields to display
  formatLabel: (fields) => fields.join(' | '), // Custom formatter for the labels
};



Add Paddng// Padding around text
=====

const textPadding = 10;

node
  .append("rect")
  .attr("x", -(dynamicWidth / 2 + textPadding)) // Adjust x to center with padding
  .attr("y", -(dynamicHeight / 2 + textPadding)) // Adjust y to center with padding
  .attr("width", dynamicWidth + 2 * textPadding) // Increase width for padding
  .attr("height", dynamicHeight + 2 * textPadding) // Increase height for padding
  .attr("rx", 6) // Optional: Rounded corners
  .attr("class", "node-rect"); // Add a class for styling

// Add text with tspan
const text = node
  .append("text")
  .attr("class", "node-text")
  .attr("dy", "0.35em") // Center text vertically
  .style("text-anchor", "middle") // Center text horizontally
  .style("font-size", "12px") // Adjust font size as needed
  .text((d: any) => d.data.name);

// Use tspan for multi-line text with padding
text.each(function (d: any) {
  const textNode = d3.select(this);
  const lines = d.data.name.split(" "); // Split text into multiple lines
  lines.forEach((line, index) => {
    textNode
      .append("tspan")
      .attr("x", 0) // Center horizontally
      .attr("dy", index === 0 ? "0em" : "1.2em") // Add vertical spacing
      .text(line);
  });
});
==================================================================================
=================================================================
import * as d3 from "d3";
import React, { useEffect, useRef, useState } from "react";

const ZoomableChart = ({ data, onNodeClick }: FlowChartProps) => {
  const svgRef = useRef<SVGSVGElement | null>(null);
  const gRef = useRef<SVGGElement | null>(null); // Group for zoomable content
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });

  useEffect(() => {
    // Handle resizing
    const handleResize = () => {
      setDimensions({
        width: window.innerWidth - 100,
        height: window.innerHeight - 100,
      });
    };
    window.addEventListener("resize", handleResize);
    handleResize();

    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    if (!svgRef.current || !gRef.current) return;

    const svg = d3.select(svgRef.current);
    const g = d3.select(gRef.current);

    // Initialize zoom
    const zoom = d3
      .zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.8, 10]) // Define min and max zoom levels
      .on("zoom", (event) => {
        g.attr("transform", event.transform); // Apply transform to the group
      });

    svg.call(zoom); // Attach zoom to the SVG

    // Initial chart rendering
    initializeChart(g, data, dimensions, onNodeClick);

    return () => {
      svg.on(".zoom", null); // Clean up zoom events on unmount
      g.selectAll("*").remove(); // Clean up chart content
    };
  }, [data, dimensions, onNodeClick]);

  const handleZoomIn = () => {
    if (svgRef.current) {
      d3.select(svgRef.current)
        .transition()
        .call(d3.zoom().scaleBy, 1.2); // Scale up by 1.2x
    }
  };

  const handleZoomOut = () => {
    if (svgRef.current) {
      d3.select(svgRef.current)
        .transition()
        .call(d3.zoom().scaleBy, 0.8); // Scale down by 0.8x
    }
  };

  return (
    <div>
      <button onClick={handleZoomIn}>Zoom In</button>
      <button onClick={handleZoomOut}>Zoom Out</button>
      <svg
        ref={svgRef}
        width={dimensions.width}
        height={dimensions.height}
        style={{ border: "1px solid black" }}
      >
        <g ref={gRef} /> {/* Group for zoomable content */}
      </svg>
    </div>
  );
};

const initializeChart = (
  g: d3.Selection<SVGGElement, unknown, null, undefined>,
  data: any,
  dimensions: { width: number; height: number },
  onNodeClick: (node: any) => void
) => {
  // Sample chart content (e.g., circles)
  g.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", (d: any) => d.x)
    .attr("cy", (d: any) => d.y)
    .attr("r", 20)
    .attr("fill", "steelblue")
    .on("click", onNodeClick);
};

export default ZoomableChart;

================================================================================
import * as d3 from "d3";
import React, { useEffect, useRef } from "react";

const ZoomableChartWithScroll = () => {
  const svgRef = useRef<SVGSVGElement | null>(null);
  const containerRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const container = d3.select(containerRef.current);
    const svg = d3.select(svgRef.current);
    const g = svg.append("g"); // Create a group element for zoomable content

    // Add some sample content (e.g., rectangles and text)
    g.append("rect")
      .attr("x", 100)
      .attr("y", 100)
      .attr("width", 400)
      .attr("height", 300)
      .attr("fill", "steelblue");

    g.append("text")
      .attr("x", 150)
      .attr("y", 200)
      .attr("font-size", "24px")
      .attr("fill", "white")
      .text("Zoomable Content");

    // Initialize zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([0.5, 5]) // Minimum and maximum zoom levels
      .on("zoom", (event) => {
        const { transform } = event;
        g.attr("transform", transform); // Apply zoom and pan transform

        // Dynamically update container bounds to enable scrolling in both directions
        const bbox = g.node().getBBox(); // Get bounding box of zoomable content
        svg.attr("width", Math.max(bbox.width * transform.k, 800)); // Dynamically update width
        svg.attr("height", Math.max(bbox.height * transform.k, 600)); // Dynamically update height
      });

    // Attach zoom behavior to SVG
    svg.call(zoom);

    // Set initial zoom and pan (optional)
    const initialTransform = d3.zoomIdentity.translate(200, 200).scale(1);
    svg.call(zoom.transform, initialTransform);

    return () => {
      svg.selectAll("*").remove(); // Cleanup on unmount
    };
  }, []);

  return (
    <div
      ref={containerRef}
      className="container"
    >
      <svg ref={svgRef} width={800} height={600} style={{ border: "1px solid black" }} />
    </div>
  );
};

export default ZoomableChartWithScroll;

==================
const wrapText = (
  text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<any>, SVGGElement, unknown>,
  maxWidth: number,
  lineHeight: number
): void => {
  text.each(function () {
    const textElement = d3.select(this);
    const words = textElement.text().split(/\s+/).reverse();
    let word: string | undefined,
      line: string[] = [],
      lineNumber = 0;

    const y = textElement.attr("y") || "0";
    const dy = parseFloat(textElement.attr("dy") || "0");

    // Clear any existing text
    let tspan = textElement
      .text(null)
      .append("tspan")
      .attr("x", 0)
      .attr("y", y)
      .attr("dy", `${dy}em`);

    while ((word = words.pop())) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node()!.getComputedTextLength() > maxWidth) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = textElement
          .append("tspan")
          .attr("x", 0)
          .attr("y", y)
          .attr("dy", `${++lineNumber * lineHeight + dy}em`)
          .text(word);
      }
    }
  });
};

========================================================================


const wrapText = (
  text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<any>, SVGGElement, unknown>,
  maxWidth: number,
  lineHeight: number
) => {
  text.each(function () {
    const textElement = d3.select(this);
    const words = textElement.text().split(/\s+/).reverse(); // Split words and reverse
    let word,
      line: string[] = [],
      lineNumber = 0;

    // Clear the current text and start adding tspans
    let tspan = textElement
      .text(null)
      .append("tspan")
      .attr("x", -90) // X position for the text
      .attr("dy", "0em"); // Start with baseline dy

    while ((word = words.pop())) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node()!.getComputedTextLength() > maxWidth) {
        // If text exceeds maxWidth, break the line
        line.pop(); // Remove the last word
        tspan.text(line.join(" ")); // Update the current line
        line = [word]; // Start a new line with the word
        tspan = textElement
          .append("tspan")
          .attr("x", -90)
          .attr("dy", `${lineHeight}em`) // Line height for next line
          .text(word);
      }
    }
  });
};

const text = svg
  .append("text")
  .attr("x", 0)
  .attr("y", 0)
  .attr("font-size", "13px")
  .attr("font-family", "sans-serif");

// Add dynamic text with padding
text
  .append("tspan")
  .attr("x", -90)
  .attr("font-weight", "bold")
  .attr("font-size", "15px")
  .text((d) => d.data.id);

text
  .append("tspan")
  .attr("x", -90)
  .attr("dy", "1.5em") // Dynamic padding
  .attr("dx", "1em")
  .attr("font-size", "13px")
  .text((d) => d.data.line1)
  .call(wrapText, 120, 1.2); // Pass maxWidth and lineHeight for wrapping

text
  .append("tspan")
  .attr("x", -90)
  .attr("dy", "1.5em") // Dynamic padding
  .attr("dx", "1em")
  .attr("font-size", "13px")
  .text((d) => d.data.line2)
  .call(wrapText, 120, 1.2);

==============================================================
const wrapSingleLineText = (
  text: string, 
  maxWidth: number, 
  textElement: d3.Selection<SVGTextElement, unknown, HTMLElement, any>
) => {
  // Create a temporary element to measure text length
  const tempText = textElement.append("text").style("visibility", "hidden").text(text);
  let truncatedText = text;

  // Measure text length and truncate if needed
  while (tempText.node()!.getComputedTextLength() > maxWidth && truncatedText.length > 0) {
    truncatedText = truncatedText.slice(0, -1); // Remove last character
    tempText.text(truncatedText + "…"); // Add ellipsis
  }

  // Set the visible text
  textElement.text(truncatedText + "…");

  // Remove the temporary element
  tempText.remove();
};

// Example usage:
const svg = d3.select("svg");

const textElement = svg
  .append("text")
  .attr("x", 10)
  .attr("y", 20)
  .attr("font-size", "12px");

const fullText = "This is a very long text that needs to fit within a given width.";
const maxWidth = 80; // Maximum allowed width for the text

wrapSingleLineText(fullText, maxWidth, textElement);



---------------------------------------------------------------------
import * as d3 from 'd3';

export const initializeChart = (
    svgRef: React.RefObject<SVGSVGElement>,
    data: HierarchicalData,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    if (!svgRef.current) return;

    const containerWidth = dimensions.width;
    const containerHeight = dimensions.height;

    // Set up tree layout with node size
    const treeLayout = d3.tree<HierarchicalData>().nodeSize([220, 200]);
    const root = d3.stratify<HierarchicalData>()
        .id((d) => d.id)
        .parentId((d) => d.parentId)(data);
    treeLayout(root);

    const nodes = root.descendants();
    const links = root.links();
    const nodeCount = nodes.length;

    // Calculate dynamic node spacing
    const nodeSpacingX = Math.max(100, containerWidth / Math.sqrt(nodeCount / (root.height + 1)));
    const nodeSpacingY = Math.max(80, containerHeight / (root.height + 1));

    // Recalculate tree layout with dynamic spacing
    treeLayout.nodeSize([nodeSpacingX, nodeSpacingY]);
    treeLayout(root);

    // Calculate min and max node positions
    const maxX = d3.max(nodes, (node) => node.x) || 0;
    const minX = d3.min(nodes, (node) => node.x) || 0;
    const maxY = d3.max(nodes, (node) => node.y) || 0;
    const minY = d3.min(nodes, (node) => node.y) || 0;

    // Define padding and calculate dynamic viewBox dimensions
    const padding = 20;
    const viewBoxWidth = maxX - minX + 2 * padding;
    const viewBoxHeight = maxY - minY + 2 * padding;

    // Select the SVG and update with the new viewBox and dimensions
    const svg = d3.select(svgRef.current)
        .attr('viewBox', `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`)
        .style('width', '100%')  // Ensure the SVG scales with the container
        .style('height', 'auto');  // Automatically set height based on content

    // Clear existing content inside SVG
    svg.selectAll("*").remove();

    // Append group for zoom and pan
    const g = svg.append('g')
        .attr('transform', `translate(${padding}, ${padding})`);

    // Add links
    g.selectAll('.link')
        .data(links)
        .enter()
        .append('path')
        .attr('class', 'link')
        .attr('d', d3.linkHorizontal<d3.HierarchyPointNode<HierarchicalData>, d3.HierarchyPointLink<HierarchicalData>>()
            .x(d => d.y)
            .y(d => d.x));

    // Add nodes
    const node = g.selectAll('.node')
        .data(nodes)
        .enter()
        .append('g')
        .attr('class', 'node')
        .attr('transform', d => `translate(${d.y},${d.x})`);

    node.append('rect')
        .attr('width', 100)  // Minimum width
        .attr('height', 80)  // Minimum height
        .attr('x', -50)      // Center the rect horizontally
        .attr('y', -40)      // Center the rect vertically
        .style('fill', '#69b3a2')
        .on('click', (event, d) => onNodeClick(d.data));

    // Add text inside nodes and handle text wrapping
    node.each(function (d) {
        const nodeGroup = d3.select(this);
        const padding = 10;

        const text = nodeGroup.append('text')
            .attr('x', 0)
            .attr('y', -30 + padding) // Padding from the top
            .attr('fill', '#f1f1f1')
            .attr('dy', '1.2em')
            .attr('text-anchor', 'middle') // Center text horizontally
            .on('click', (event, d) => {
                alert(`Node Id clicked: ${d.data.id}`);
            });

        const wrapText = (text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<HierarchicalData>, SVGGElement, unknown>, width: number) => {
            text.each(function () {
                const textElement = d3.select<SVGTextElement, d3.HierarchyPointNode<HierarchicalData>>(this);
                const words = textElement.text().split(/\s+/).reverse();
                const lineHeight = 1.1;
                const y = textElement.attr('y');
                const dy = parseFloat(textElement.attr('dy'));
                let tspan = textElement.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em') as d3.Selection<SVGTSpanElement, unknown, HTMLElement, any>;

                let word,
                    line: string[] = [],
                    lineNumber = 0;

                while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(' '));
                    if (tspan.node()!.getComputedTextLength() > width) {
                        line.pop();
                        tspan.text(line.join(' '));
                        line = [word];
                        tspan = textElement.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word) as d3.Selection<SVGTSpanElement, unknown, HTMLElement, any>;
                    }
                }
            });
        };

        const textContent = `ID: ${d.data.id} ${d.data.line1}`;
        const textElement = text.append('tspan').text(textContent) as d3.Selection<SVGTSpanElement, unknown, HTMLElement, any>;

        wrapText(textElement, 80); // Adjust width for text wrapping
    });
};


///


Zoom FIle 
import { applyZoom } from './valpre-chart'; // Import zoom function

const initializeTreeChart = (
  svgRef: React.RefObject<SVGSVGElement>,
  data: HierarchicalData[],
  dimensions: { width: number; height: number },
  onNodeClick: (data: any) => void
) => {
  if (!svgRef.current) return;

  const treeLayout = d3.tree<HierarchicalData>().nodeSize([220, 200]);

  const root = d3
    .stratify<HierarchicalData>()
    .id((d) => d.id)
    .parentId((d) => d.parentId)(data);

  treeLayout(root);

  const nodes = root.descendants();

  // Calculate bounds
  const maxX = d3.max(nodes, (node) => node.x) || 0;
  const minX = d3.min(nodes, (node) => node.x) || 0;
  const maxY = d3.max(nodes, (node) => node.y) || 0;
  const minY = d3.min(nodes, (node) => node.y) || 0;

  const padding = 100; // Add padding
  const viewBoxWidth = maxX - minX + padding * 2;
  const viewBoxHeight = maxY - minY + padding * 2;

  // Set up SVG dimensions
  const svg = d3.select(svgRef.current);
  svg
    .attr('viewBox', `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`)
    .attr('width', dimensions.width)
    .attr('height', dimensions.height);

  const zoomGroup = svg.append('g').attr('class', 'zoom-group');

  // Apply external zoom functionality
  applyZoom(svg, zoomGroup);

  // Render nodes
  zoomGroup
    .selectAll('.node')
    .data(nodes)
    .enter()
    .append('rect')
    .attr('class', 'node')
    .attr('x', (d) => d.x - 50) // Center the rectangle on the node position
    .attr('y', (d) => d.y - 40)
    .attr('width', 100) // Fixed node width
    .attr('height', 80) // Fixed node height
    .attr('fill', 'lightblue')
    .attr('stroke', 'black')
    .attr('rx', 10); // Rounded corners

  // Render links
  zoomGroup
    .selectAll('.link')
    .data(root.links())
    .enter()
    .append('path')
    .attr('class', 'link')
    .attr(
      'd',
      d3.linkHorizontal<HierarchyPointLink<HierarchicalData>, HierarchyPointNode

=============================================================================
const initializeTreeChart = (
  svgRef: React.RefObject<SVGSVGElement>,
  data: HierarchicalData[],
  dimensions: { width: number; height: number },
  onNodeClick: (data: any) => void
) => {
  if (!svgRef.current) return;

  const containerWidth = dimensions.width;
  const containerHeight = dimensions.height;

  // Initialize tree layout with default node size
  const treeLayout = d3.tree<HierarchicalData>().nodeSize([220, 200]);

  // Prepare data for the tree
  const root = d3
    .stratify<HierarchicalData>()
    .id((d) => d.id)
    .parentId((d) => d.parentId)(data);

  treeLayout(root);

  const nodes = root.descendants();
  const nodeCount = nodes.length;

  // Calculate min and max node positions
  let maxX = d3.max(nodes, (node) => node.x) || 0;
  let minX = d3.min(nodes, (node) => node.x) || 0;
  let maxY = d3.max(nodes, (node) => node.y) || 0;
  let minY = d3.min(nodes, (node) => node.y) || 0;

  // Ensure nodes maintain a minimum width of 100px and height of 80px
  const minNodeWidth = 100;
  const minNodeHeight = 80;

  if (maxX - minX < minNodeWidth) {
    const centerX = (maxX + minX) / 2;
    const adjustmentX = minNodeWidth / 2;
    maxX = centerX + adjustmentX;
    minX = centerX - adjustmentX;
  }

  if (maxY - minY < minNodeHeight) {
    const centerY = (maxY + minY) / 2;
    const adjustmentY = minNodeHeight / 2;
    maxY = centerY + adjustmentY;
    minY = centerY - adjustmentY;
  }

  // Padding to prevent cutting off nodes
  const padding = 100;

  // Dynamic viewBox calculation
  const viewBoxWidth = maxX - minX + padding * 2;
  const viewBoxHeight = maxY - minY + padding * 2;

  // Select the SVG and update attributes
  const svg = d3.select(svgRef.current);
  svg
    .attr('viewBox', `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`)
    .attr('width', containerWidth)
    .attr('height', containerHeight);

  // Set node spacing dynamically based on container size and node count
  const nodeSpacingX = Math.max(220, containerWidth / Math.sqrt(nodeCount));
  const nodeSpacingY = Math.max(200, containerHeight / (root.height + 1));

  treeLayout.nodeSize([nodeSpacingX, nodeSpacingY]);

  // Center the chart within the container
  svg
    .append('g')
    .attr('transform', `translate(${containerWidth / 2}, ${padding})`);
};


=====================================================================
import * as d3 from 'd3';

export const initializeChart = (
    svgRef: React.RefObject<SVGSVGElement>,
    data: HierarchicalData,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    if (!svgRef.current) return;

    // Set up SVG
    const svg = d3.select(svgRef.current)
        .attr("viewBox", `0 0 ${dimensions.width} ${dimensions.height}`)
        .attr("preserveAspectRatio", "xMidYMid meet")
        .call(d3.zoom<SVGSVGElement, unknown>()
            .scaleExtent([0.5, 5])
            .on("zoom", ({ transform }) => {
                g.attr("transform", transform);
            }));

    // Clear existing content inside SVG
    svg.selectAll("*").remove();

    // Append group for zoom
    const g = svg.append("g");

    // Initialize the root and layout
    const root = d3.hierarchy<HierarchicalData>(data);
    const treeLayout = d3.tree<HierarchicalData>()
        .nodeSize([100, 300]); // Adjusted node spacing to keep nodes readable

    treeLayout(root);

    const nodes: d3.HierarchyPointNode<HierarchicalData>[] = root.descendants();
    const links: d3.HierarchyPointLink<HierarchicalData>[] = root.links();

    g.selectAll<SVGPathElement, d3.HierarchyPointLink<HierarchicalData>>(".link")
        .data(links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal<d3.HierarchyPointNode<HierarchicalData>, d3.HierarchyPointLink<HierarchicalData>>()
            .x(d => d.y)
            .y(d => d.x));

    const node = g.selectAll<SVGGElement, d3.HierarchyPointNode<HierarchicalData>>(".node")
        .data(nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`);

    node.append("rect")
        .attr("width", 200)
        .attr("height", 70)
        .attr("x", -100)
        .attr("y", -35)
        .style("fill", "#69b3a2")
        .on('click', (event, d) => onNodeClick(d.data));

    node.each(function (d) {
        const nodeGroup = d3.select(this);

        const text = nodeGroup.append('text')
            .attr('x', 0)
            .attr('y', -35 + 20) // Padding from the top
            .attr('fill', '#f1f1f1')
            .attr('dy', '1.2em')
            .attr('text-anchor', 'middle') // Center text horizontally
            .on('click', (event, d) => {
                alert(`Node Id clicked: ${d.data.id}`);
            });

        const wrapText = (text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<HierarchicalData>, SVGGElement, unknown>, width: number) => {
            text.each(function () {
                const textElement = d3.select(this),
                    words = textElement.text().split(/\s+/).reverse(),
                    lineHeight = 1.1,
                    y = textElement.attr('y'),
                    dy = parseFloat(textElement.attr('dy')),
                    tspan = textElement.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');

                let word,
                    line: string[] = [],
                    lineNumber = 0,
                    tspanElement = tspan.node() as SVGTextElement;

                while (word = words.pop()) {
                    line.push(word);
                    tspanElement.textContent = line.join(' ');
                    if (tspanElement.getComputedTextLength() > width) {
                        line.pop();
                        tspanElement.textContent = line.join(' ');
                        line = [word];
                        tspan = textElement.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                    }
                }
            });
        };

        const textContent = `ID: ${d.data.id} ${d.data.line1}`;
        const textElement = text.append('tspan').text(textContent);

        wrapText(textElement, 160); // Adjust width for text wrapping
    });

    const maxX = d3.max(nodes, (node) => node.x) || 0;
    const minX = d3.min(nodes, (node) => node.x) || 0;
    const maxY = d3.max(nodes, (node) => node.y) || 0;
    const minY = d3.min(nodes, (node) => node.y) || 0;

    const padding = 20;
    const viewBoxWidth = maxX - minX + 2 * padding;
    const viewBoxHeight = maxY - minY + 2 * padding;
    svg.attr("viewBox", `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`);
};

























// Calculate min and max node positions
const maxX = d3.max(nodes, (node) => node.x) || 0;
const minX = d3.min(nodes, (node) => node.x) || 0;

// Define the minimum width for nodes
const minNodeWidth = 100;

// Ensure node width is at least 100px
if (maxX - minX < minNodeWidth) {
    const centerX = (maxX + minX) / 2; // Find the center point
    const adjustment = minNodeWidth / 2; // Half of the minimum width

    // Adjust maxX and minX to meet the minimum width requirement
    maxX = centerX + adjustment;
    minX = centerX - adjustment;
}

// Padding to prevent cutting off nodes
const padding = 100;

// Calculate viewBox dimensions
const viewBoxWidth = maxX - minX + padding * 2;
const viewBoxHeight = maxY - minY + padding * 2;

// Set the SVG attributes
svg.attr('viewBox', `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`)
   .attr('width', containerWidth)
   .attr('height', containerHeight);

===========================================
const viewBoxWidth = maxx - minx + padding * 2;
const viewBoxHeight = maxy - miny + padding * 2;

// Add explicit adjustments if scaling causes cuts
const additionalPadding = 50; // Extra space to prevent cutoff
const finalViewBoxWidth = viewBoxWidth + additionalPadding;
const finalViewBoxHeight = viewBoxHeight + additionalPadding;


const maxx = d3.max(nodes, (node) => node.x) || 0;
const minx = d3.min(nodes, (node) => node.x) || 0;
const maxy = d3.max(nodes, (node) => node.y) || 0;
const miny = d3.min(nodes, (node) => node.y) || 0;

// Dynamic padding
const padding = Math.max(100, nodes.length * 10); 

// Dynamic viewBox calculation with scaling limit
const viewBoxWidth = maxx - minx + padding * 2;
const viewBoxHeight = maxy - miny + padding * 2;

const maxViewBoxSize = 2000;
if (viewBoxWidth > maxViewBoxSize) {
    const aspectRatio = viewBoxWidth / viewBoxHeight;
    viewBoxWidth = maxViewBoxSize;
    viewBoxHeight = maxViewBoxSize / aspectRatio;
}

// Set SVG viewBox
svg.attr('viewBox', `${minx - padding} ${miny - padding} ${viewBoxWidth} ${viewBoxHeight}`)
   .attr('width', containerWidth)
   .attr('height', containerHeight);

// Apply scaling to the group containing nodes
const scaleX = containerWidth / viewBoxWidth;
const scaleY = containerHeight / viewBoxHeight;
const scale = Math.min(scaleX, scaleY);

const g = svg.append('g')
    .attr('transform', `scale(${scale})`);

// Add zoom
const zoom = d3.zoom()
    .scaleExtent([0.5, 5]) 
    .on('zoom', (event) => {
        g.attr('transform', event.transform);
    });

svg.call(zoom);


----------------------------------------------------------------------------------------------------------
const rectWidth = d3.max(nodes, (node) => node.width) || 100;
const rectHeight = d3.max(nodes, (node) => node.height) || 50;

import * as d3 from 'd3';

export const initializeChart = (
    svgRef: React.RefObject<SVGSVGElement>,
    data: HierarchicalData,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    if (!svgRef.current) return;

    // Set up SVG
    const svg = d3.select(svgRef.current)
        .attr("viewBox", `0 0 ${dimensions.width} ${dimensions.height}`)
        .attr("preserveAspectRatio", "xMidYMid meet");

    // Clear existing content inside SVG
    svg.selectAll("*").remove();

    // Append group for zoom
    const g = svg.append("g");

    // Initialization code for the chart (nodes, links, etc.)
    const root = d3.hierarchy<HierarchicalData>(data);
    const treeLayout = d3.tree<HierarchicalData>().size([dimensions.height, dimensions.width]);
    treeLayout(root);

    const nodes: d3.HierarchyPointNode<HierarchicalData>[] = root.descendants();
    const links: d3.HierarchyPointLink<HierarchicalData>[] = root.links();

    // Calculate dynamic node spacing
    const nodeCount = nodes.length;
    const nodeSpacingX = Math.max(50, dimensions.width / (nodeCount / 2));
    const nodeSpacingY = Math.max(70, dimensions.height / (root.height + 1));

    // Recalculate tree layout with dynamic spacing
    treeLayout.nodeSize([nodeSpacingX, nodeSpacingY]);
    treeLayout(root);

    g.selectAll<SVGPathElement, d3.HierarchyPointLink<HierarchicalData>>(".link")
        .data(links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal<d3.HierarchyPointNode<HierarchicalData>, d3.HierarchyPointLink<HierarchicalData>>()
            .x(d => d.y)
            .y(d => d.x));

    const node = g.selectAll<SVGGElement, d3.HierarchyPointNode<HierarchicalData>>(".node")
        .data(nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`);

    node.append("rect")
        .attr("width", d => {
            const dynamicWidth = Math.max(200, d.data.name.length * 10); // Example dynamic width calculation
            return Math.max(dynamicWidth, 100); // Ensure minimum width is 100
        })
        .attr("height", d => {
            const dynamicHeight = Math.max(50, d.data.name.length * 2); // Example dynamic height calculation
            return Math.max(dynamicHeight, 70); // Ensure minimum height is 70
        })
        .attr("x", d => {
            const dynamicWidth = Math.max(200, d.data.name.length * 10);
            return -Math.max(dynamicWidth, 100) / 2; // Center the rect
        })
        .attr("y", d => {
            const dynamicHeight = Math.max(50, d.data.name.length * 2);
            return -Math.max(dynamicHeight, 70) / 2; // Center the rect
        })
        .style("fill", "#69b3a2")
        .on('click', (event, d) => onNodeClick(d.data));

    node.each(function (d) {
        const nodeGroup = d3.select(this);
        const padding = 10;
        const rectWidth = 200 - 2 * padding;
        const rectHeight = 70 - 2 * padding;

        const text = nodeGroup.append('text')
            .attr('x', 0)
            .attr('y', -35 + padding) // padding from the top
            .attr('fill', '#f1f1f1')
            .attr('dy', '1.2em')
            .attr('text-anchor', 'middle') // Center text horizontally
            .on('click', (event, d) => {
                alert(`Node Id clicked: ${d.data.id}`);
            });

        // Function to wrap text
        const wrapText = (text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<HierarchicalData>, SVGGElement, unknown>, width: number) => {
            text.each(function () {
                const textElement = d3.select(this),
                    words = textElement.text().split(/\s+/).reverse(),
                    lineHeight = 1.1, // ems
                    y = textElement.attr('y'),
                    dy = parseFloat(textElement.attr('dy')),
                    tspan = textElement.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');

                let word,
                    line: string[] = [],
                    lineNumber = 0,
                    tspanElement = tspan.node() as SVGTextElement;

                while (word = words.pop()) {
                    line.push(word);
                    tspanElement.textContent = line.join(' ');
                    if (tspanElement.getComputedTextLength() > width) {
                        line.pop();
                        tspanElement.textContent = line.join(' ');
                        line = [word];
                        tspan = textElement.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                    }
                }
            });
        };

        // Add text elements with tspan for wrapping
        const textContent = `ID: ${d.data.id} ${d.data.line1}`;
        const textElement = text.append('tspan').text(textContent);

        // Apply wrapText function to text elements
        wrapText(textElement, rectWidth);
    });

    // Calculate min and max node positions
    const maxX = d3.max(nodes, (node) => node.x) || 0;
    const minX = d3.min(nodes, (node) => node.x) || 0;
    const maxY = d3.max(nodes, (node) => node.y) || 0;
    const minY = d3.min(nodes, (node) => node.y) || 0;

    // Adjust the viewBox to ensure the entire tree fits within the viewport
    const padding = 20;
    const viewBoxWidth = maxX - minX + 2 * padding;
    const viewBoxHeight = maxY - minY + 2 * padding;
    svg.attr("viewBox", `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`);
};

======================================================================================

import React, { useRef, useEffect, useState } from "react";
import * as d3 from "d3";

interface Node {
  id: string;
  parentId: string | null;
}

interface Link {
  source: string;
  target: string;
}

interface ChartProps {
  nodes: Node[];
  links: Link[];
}
const calculateDimensions = (nodeCount: number) => {
  const baseWidth = 800;  // Minimum width of the chart
  const baseHeight = 600; // Minimum height of the chart
  const nodeWidthIncrement = 50; // Additional width per node
  const nodeHeightIncrement = 30; // Additional height per node

  // Dynamically calculate dimensions based on the number of nodes
  const width = Math.max(baseWidth, nodeCount * nodeWidthIncrement);
  const height = Math.max(baseHeight, nodeCount * nodeHeightIncrement);

  return { width, height };
};

const DynamicGraph: React.FC<ChartProps> = ({ nodes, links }) => {
  const svgRef = useRef<SVGSVGElement | null>(null);
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });

const createSimulation = (nodes: any[], links: any[], width: number, height: number) => {
  const simulation = d3.forceSimulation(nodes)
    .force("link", d3.forceLink(links).id((d: any) => d.id).distance(Math.max(50, width / nodes.length)))
    .force("charge", d3.forceManyBody().strength(-Math.max(30, width / (2 * nodes.length))))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide().radius(40));

  return simulation;
};
const renderGraph = (svg: d3.Selection<SVGGElement, unknown, null, undefined>, simulation: any, nodes: any[], links: any[]) => {
  const link = svg.selectAll(".link")
    .data(links)
    .enter()
    .append("line")
    .attr("class", "link");

  const node = svg.selectAll(".node")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("class", "node")
    .attr("r", 20);

  simulation.on("tick", () => {
    link
      .attr("x1", (d: any) => d.source.x)
      .attr("y1", (d: any) => d.source.y)
      .attr("x2", (d: any) => d.target.x)
      .attr("y2", (d: any) => d.target.y);

    node
      .attr("cx", (d: any) => d.x)
      .attr("cy", (d: any) => d.y);
  });
};

const addZoomAndPan = (svg: d3.Selection<SVGGElement, unknown, null, undefined>) => {
  const zoom = d3.zoom<SVGSVGElement, unknown>().on("zoom", (event) => {
    svg.attr("transform", event.transform);
  });
  svg.call(zoom);
};


  useEffect(() => {
    const nodeCount = nodes.length;
    const { width, height } = calculateDimensions(nodeCount);

    setDimensions({ width, height });

    const svg = d3.select(svgRef.current)
      .attr("width", width)
      .attr("height", height);

    updateSVGDimensions(svg, width, height);

    const simulation = createSimulation(nodes, links, width, height);
    renderGraph(svg.append("g"), simulation, nodes, links);
    addZoomAndPan(svg.select("g"));
  }, [nodes, links]);

  return <svg ref={svgRef}></svg>;
};
--------------------------------------------------
const DynamicOrgChart = ({ data }: { data: any[] }) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      setDimensions({ width, height });
    };

    window.addEventListener("resize", handleResize);
    handleResize(); // Initialize on mount
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove(); // Clear previous content

    const treeLayout = d3
      .tree()
      .size([dimensions.width - 200, dimensions.height - 150])
      .nodeSize([100, 150]);

    const root = d3.hierarchy(data);
    treeLayout(root);

    // Draw nodes, links, etc.
  }, [data, dimensions]);

  return <svg ref={svgRef} style={{ width: "100%", height: "100%" }} />;
};

export default DynamicOrgChart;
----------------------------------------------------------------------------------

export default DynamicGraph;
