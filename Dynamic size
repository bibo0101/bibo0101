const maxx = d3.max(nodes, (node) => node.x) || 0;
const minx = d3.min(nodes, (node) => node.x) || 0;
const maxy = d3.max(nodes, (node) => node.y) || 0;
const miny = d3.min(nodes, (node) => node.y) || 0;

// Dynamic padding
const padding = Math.max(100, nodes.length * 10); 

// Dynamic viewBox calculation with scaling limit
const viewBoxWidth = maxx - minx + padding * 2;
const viewBoxHeight = maxy - miny + padding * 2;

const maxViewBoxSize = 2000;
if (viewBoxWidth > maxViewBoxSize) {
    const aspectRatio = viewBoxWidth / viewBoxHeight;
    viewBoxWidth = maxViewBoxSize;
    viewBoxHeight = maxViewBoxSize / aspectRatio;
}

// Set SVG viewBox
svg.attr('viewBox', `${minx - padding} ${miny - padding} ${viewBoxWidth} ${viewBoxHeight}`)
   .attr('width', containerWidth)
   .attr('height', containerHeight);

// Apply scaling to the group containing nodes
const scaleX = containerWidth / viewBoxWidth;
const scaleY = containerHeight / viewBoxHeight;
const scale = Math.min(scaleX, scaleY);

const g = svg.append('g')
    .attr('transform', `scale(${scale})`);

// Add zoom
const zoom = d3.zoom()
    .scaleExtent([0.5, 5]) 
    .on('zoom', (event) => {
        g.attr('transform', event.transform);
    });

svg.call(zoom);


----------------------------------------------------------------------------------------------------------
const rectWidth = d3.max(nodes, (node) => node.width) || 100;
const rectHeight = d3.max(nodes, (node) => node.height) || 50;

import * as d3 from 'd3';

export const initializeChart = (
    svgRef: React.RefObject<SVGSVGElement>,
    data: HierarchicalData,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    if (!svgRef.current) return;

    // Set up SVG
    const svg = d3.select(svgRef.current)
        .attr("viewBox", `0 0 ${dimensions.width} ${dimensions.height}`)
        .attr("preserveAspectRatio", "xMidYMid meet");

    // Clear existing content inside SVG
    svg.selectAll("*").remove();

    // Append group for zoom
    const g = svg.append("g");

    // Initialization code for the chart (nodes, links, etc.)
    const root = d3.hierarchy<HierarchicalData>(data);
    const treeLayout = d3.tree<HierarchicalData>().size([dimensions.height, dimensions.width]);
    treeLayout(root);

    const nodes: d3.HierarchyPointNode<HierarchicalData>[] = root.descendants();
    const links: d3.HierarchyPointLink<HierarchicalData>[] = root.links();

    // Calculate dynamic node spacing
    const nodeCount = nodes.length;
    const nodeSpacingX = Math.max(50, dimensions.width / (nodeCount / 2));
    const nodeSpacingY = Math.max(70, dimensions.height / (root.height + 1));

    // Recalculate tree layout with dynamic spacing
    treeLayout.nodeSize([nodeSpacingX, nodeSpacingY]);
    treeLayout(root);

    g.selectAll<SVGPathElement, d3.HierarchyPointLink<HierarchicalData>>(".link")
        .data(links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal<d3.HierarchyPointNode<HierarchicalData>, d3.HierarchyPointLink<HierarchicalData>>()
            .x(d => d.y)
            .y(d => d.x));

    const node = g.selectAll<SVGGElement, d3.HierarchyPointNode<HierarchicalData>>(".node")
        .data(nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`);

    node.append("rect")
        .attr("width", d => {
            const dynamicWidth = Math.max(200, d.data.name.length * 10); // Example dynamic width calculation
            return Math.max(dynamicWidth, 100); // Ensure minimum width is 100
        })
        .attr("height", d => {
            const dynamicHeight = Math.max(50, d.data.name.length * 2); // Example dynamic height calculation
            return Math.max(dynamicHeight, 70); // Ensure minimum height is 70
        })
        .attr("x", d => {
            const dynamicWidth = Math.max(200, d.data.name.length * 10);
            return -Math.max(dynamicWidth, 100) / 2; // Center the rect
        })
        .attr("y", d => {
            const dynamicHeight = Math.max(50, d.data.name.length * 2);
            return -Math.max(dynamicHeight, 70) / 2; // Center the rect
        })
        .style("fill", "#69b3a2")
        .on('click', (event, d) => onNodeClick(d.data));

    node.each(function (d) {
        const nodeGroup = d3.select(this);
        const padding = 10;
        const rectWidth = 200 - 2 * padding;
        const rectHeight = 70 - 2 * padding;

        const text = nodeGroup.append('text')
            .attr('x', 0)
            .attr('y', -35 + padding) // padding from the top
            .attr('fill', '#f1f1f1')
            .attr('dy', '1.2em')
            .attr('text-anchor', 'middle') // Center text horizontally
            .on('click', (event, d) => {
                alert(`Node Id clicked: ${d.data.id}`);
            });

        // Function to wrap text
        const wrapText = (text: d3.Selection<SVGTextElement, d3.HierarchyPointNode<HierarchicalData>, SVGGElement, unknown>, width: number) => {
            text.each(function () {
                const textElement = d3.select(this),
                    words = textElement.text().split(/\s+/).reverse(),
                    lineHeight = 1.1, // ems
                    y = textElement.attr('y'),
                    dy = parseFloat(textElement.attr('dy')),
                    tspan = textElement.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');

                let word,
                    line: string[] = [],
                    lineNumber = 0,
                    tspanElement = tspan.node() as SVGTextElement;

                while (word = words.pop()) {
                    line.push(word);
                    tspanElement.textContent = line.join(' ');
                    if (tspanElement.getComputedTextLength() > width) {
                        line.pop();
                        tspanElement.textContent = line.join(' ');
                        line = [word];
                        tspan = textElement.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                    }
                }
            });
        };

        // Add text elements with tspan for wrapping
        const textContent = `ID: ${d.data.id} ${d.data.line1}`;
        const textElement = text.append('tspan').text(textContent);

        // Apply wrapText function to text elements
        wrapText(textElement, rectWidth);
    });

    // Calculate min and max node positions
    const maxX = d3.max(nodes, (node) => node.x) || 0;
    const minX = d3.min(nodes, (node) => node.x) || 0;
    const maxY = d3.max(nodes, (node) => node.y) || 0;
    const minY = d3.min(nodes, (node) => node.y) || 0;

    // Adjust the viewBox to ensure the entire tree fits within the viewport
    const padding = 20;
    const viewBoxWidth = maxX - minX + 2 * padding;
    const viewBoxHeight = maxY - minY + 2 * padding;
    svg.attr("viewBox", `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`);
};

======================================================================================

import React, { useRef, useEffect, useState } from "react";
import * as d3 from "d3";

interface Node {
  id: string;
  parentId: string | null;
}

interface Link {
  source: string;
  target: string;
}

interface ChartProps {
  nodes: Node[];
  links: Link[];
}
const calculateDimensions = (nodeCount: number) => {
  const baseWidth = 800;  // Minimum width of the chart
  const baseHeight = 600; // Minimum height of the chart
  const nodeWidthIncrement = 50; // Additional width per node
  const nodeHeightIncrement = 30; // Additional height per node

  // Dynamically calculate dimensions based on the number of nodes
  const width = Math.max(baseWidth, nodeCount * nodeWidthIncrement);
  const height = Math.max(baseHeight, nodeCount * nodeHeightIncrement);

  return { width, height };
};

const DynamicGraph: React.FC<ChartProps> = ({ nodes, links }) => {
  const svgRef = useRef<SVGSVGElement | null>(null);
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });

const createSimulation = (nodes: any[], links: any[], width: number, height: number) => {
  const simulation = d3.forceSimulation(nodes)
    .force("link", d3.forceLink(links).id((d: any) => d.id).distance(Math.max(50, width / nodes.length)))
    .force("charge", d3.forceManyBody().strength(-Math.max(30, width / (2 * nodes.length))))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide().radius(40));

  return simulation;
};
const renderGraph = (svg: d3.Selection<SVGGElement, unknown, null, undefined>, simulation: any, nodes: any[], links: any[]) => {
  const link = svg.selectAll(".link")
    .data(links)
    .enter()
    .append("line")
    .attr("class", "link");

  const node = svg.selectAll(".node")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("class", "node")
    .attr("r", 20);

  simulation.on("tick", () => {
    link
      .attr("x1", (d: any) => d.source.x)
      .attr("y1", (d: any) => d.source.y)
      .attr("x2", (d: any) => d.target.x)
      .attr("y2", (d: any) => d.target.y);

    node
      .attr("cx", (d: any) => d.x)
      .attr("cy", (d: any) => d.y);
  });
};

const addZoomAndPan = (svg: d3.Selection<SVGGElement, unknown, null, undefined>) => {
  const zoom = d3.zoom<SVGSVGElement, unknown>().on("zoom", (event) => {
    svg.attr("transform", event.transform);
  });
  svg.call(zoom);
};


  useEffect(() => {
    const nodeCount = nodes.length;
    const { width, height } = calculateDimensions(nodeCount);

    setDimensions({ width, height });

    const svg = d3.select(svgRef.current)
      .attr("width", width)
      .attr("height", height);

    updateSVGDimensions(svg, width, height);

    const simulation = createSimulation(nodes, links, width, height);
    renderGraph(svg.append("g"), simulation, nodes, links);
    addZoomAndPan(svg.select("g"));
  }, [nodes, links]);

  return <svg ref={svgRef}></svg>;
};
--------------------------------------------------
const DynamicOrgChart = ({ data }: { data: any[] }) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      setDimensions({ width, height });
    };

    window.addEventListener("resize", handleResize);
    handleResize(); // Initialize on mount
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove(); // Clear previous content

    const treeLayout = d3
      .tree()
      .size([dimensions.width - 200, dimensions.height - 150])
      .nodeSize([100, 150]);

    const root = d3.hierarchy(data);
    treeLayout(root);

    // Draw nodes, links, etc.
  }, [data, dimensions]);

  return <svg ref={svgRef} style={{ width: "100%", height: "100%" }} />;
};

export default DynamicOrgChart;
----------------------------------------------------------------------------------

export default DynamicGraph;
