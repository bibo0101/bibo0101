nodes
  .append("text")
  .attr("text-anchor", "middle")
  .style("font-size", "12px")
  .selectAll("tspan")
  .data((d) => {
    // Map the data into an array of objects dynamically
    return [
      {
        text: d.data.name,
        dy: "-20",
        style: "bold",
        size: "14px",
        fill: "#000",
        onClick: () => console.log(`Clicked on Name: ${d.data.name}`),
      },
      {
        text: d.data.description,
        dy: "15",
        style: "normal",
        size: "12px",
        fill: "#000",
        onClick: () => console.log(`Clicked on Description: ${d.data.description}`),
      },
      {
        text: d.data.country,
        dy: "15",
        style: "normal",
        size: "10px",
        fill: "#555",
        onClick: () => console.log(`Clicked on Country: ${d.data.country}`),
      },
    ];
  })
  .enter()
  .append("tspan")
  .attr("x", 0) // Center the text
  .attr("dy", (d) => d.dy) // Position the line dynamically
  .style("font-weight", (d) => d.style)
  .style("font-size", (d) => d.size)
  .style("fill", (d) => d.fill)
  .text((d) => d.text) // Bind the text
  .on("click", (event, d) => d.onClick()); // Handle click dynamically
================================================================================================another prospecgt
data.nodes.map((node) => (
  <text key={node.id} textAnchor="middle" style={{ fontSize: "12px" }}>
    {[
      { text: node.name, dy: "-20", size: "14px", onClick: () => handleClick("Name", node.name) },
      { text: node.description, dy: "15", size: "12px", onClick: () => handleClick("Description", node.description) },
      { text: node.country, dy: "15", size: "10px", onClick: () => handleClick("Country", node.country) },
    ].map((line, index) => (
      <tspan
        key={index}
        x="0"
        dy={line.dy}
        style={{ fontSize: line.size }}
        onClick={line.onClick}
      >
        {line.text}
      </tspan>
    ))}
  </text>
));
==========================================================================================================
nodes
  .append("text")
  .attr("text-anchor", "middle")
  .style("font-size", "12px")
  .selectAll("tspan")
  .data((d) => [
    { text: d.data.name, dy: "-20", style: "bold", size: "14px" },
    { text: d.data.description, dy: "15", style: "normal", size: "12px" },
    { text: d.data.country, dy: "15", style: "normal", size: "10px" },
  ])
  .enter()
  .append("tspan")
  .attr("x", 0) // Center the text
  .attr("dy", (d) => d.dy) // Position the line dynamically
  .style("font-weight", (d) => d.style)
  .style("font-size", (d) => d.size)
  .text((d) => d.text)
  .on("click", (event, d) => {
    onNodeClick(d); // Use reusable `onClick` callback
  });
=================================================================================================
function createOrgChart({
  data,
  container,
  dimensions,
  onNodeClick = () => {}, // Default onClick
}) {
  const { width, height } = dimensions;

  const svg = d3
    .select(container)
    .append("svg")
    .attr("width", width)
    .attr("height", height);

  const nodes = svg
    .selectAll("g.node")
    .data(data)
    .enter()
    .append("g")
    .attr("class", "node")
    .attr("transform", (d) => `translate(${d.x}, ${d.y})`)
    .on("click", (event, d) => onNodeClick(d)); // Reusable onClick

  // Add image to nodes
  nodes
    .append("image")
    .attr("xlink:href", (d) => d.data.image) // Use the image URL from data
    .attr("x", -20) // Center the image horizontally
    .attr("y", -50) // Position the image above the text
    .attr("width", 40) // Set image width
    .attr("height", 40); // Set image height

  // Add text to nodes
  nodes
    .append("text")
    .attr("text-anchor", "middle")
    .style("font-size", "12px")
    .selectAll("tspan")
    .data((d) => {
      const maxChars = 15; // Max characters per line
      const wrappedName = wrapText(d.data.name, maxChars);
      const wrappedDescription = wrapText(d.data.description, maxChars);
      const wrappedCountry = wrapText(d.data.country, maxChars);

      return [
        { text: wrappedName, dy: "-20", style: "bold", size: "14px" },
        { text: wrappedDescription, dy: "15", style: "normal", size: "12px" },
        { text: wrappedCountry, dy: "15", style: "normal", size: "10px" },
      ];
    })
    .enter()
    .append("tspan")
    .attr("x", 0) // Center the text horizontally
    .attr("dy", (d, i) => (i === 0 ? d.dy : "1.2em")) // Adjust dy for line breaks
    .style("font-weight", (d) => d.style)
    .style("font-size", (d) => d.size)
    .text((d) => d.text)
    .on("click", (event, d) => {
      onNodeClick(d); // Use reusable onClick
    });

  // Helper function for word wrapping
  function wrapText(text, maxChars) {
    const words = text.split(" ");
    let line = "";
    const lines = [];

    words.forEach((word) => {
      if ((line + word).length > maxChars) {
        lines.push(line);
        line = word + " ";
      } else {
        line += word + " ";
      }
    });

    if (line) {
      lines.push(line.trim());
    }

    return lines;
  }
}
  ===================================================
// wrapText.ts
export function wrapText(text: string, maxChars: number): string[] {
  const words = text.split(" ");
  let line = "";
  const lines: string[] = [];

  words.forEach((word) => {
    if ((line + word).length > maxChars) {
      lines.push(line);
      line = word + " ";
    } else {
      line += word + " ";
    }
  });

  if (line) {
    lines.push(line.trim());
  }

  return lines;
}
-----------------------------------------------------------------------------------------------------
import { wrapText } from "./wrapText"; // Adjust the path based on your folder structure

function createOrgChart({
  data,
  container,
  dimensions,
  onNodeClick = () => {}, // Default onClick
}) {
  const { width, height } = dimensions;

  const svg = d3
    .select(container)
    .append("svg")
    .attr("width", width)
    .attr("height", height);

  const nodes = svg
    .selectAll("g.node")
    .data(data)
    .enter()
    .append("g")
    .attr("class", "node")
    .attr("transform", (d) => `translate(${d.x}, ${d.y})`)
    .on("click", (event, d) => onNodeClick(d)); // Reusable onClick

  // Add SVG image to nodes
  nodes
    .append("image")
    .attr("xlink:href", (d) => d.data.image) // Use the SVG URL from data
    .attr("x", -20) // Center the SVG horizontally
    .attr("y", -50) // Position the SVG above the text
    .attr("width", 40) // Set SVG width
    .attr("height", 40); // Set SVG height

  // Add text to nodes
  nodes
    .append("text")
    .attr("text-anchor", "middle")
    .style("font-size", "12px")
    .selectAll("tspan")
    .data((d) => {
      const maxChars = 15; // Max characters per line
      const wrappedName = wrapText(d.data.name, maxChars);
      const wrappedDescription = wrapText(d.data.description, maxChars);
      const wrappedCountry = wrapText(d.data.country, maxChars);

      return [
        { text: wrappedName, dy: "-20", style: "bold", size: "14px" },
        { text: wrappedDescription, dy: "15", style: "normal", size: "12px" },
        { text: wrappedCountry, dy: "15", style: "normal", size: "10px" },
      ];
    })
    .enter()
    .append("tspan")
    .attr("x", 0) // Center the text horizontally
    .attr("dy", (d, i) => (i === 0 ? d.dy : "1.2em")) // Adjust dy for line breaks
    .style("font-weight", (d) => d.style)
    .style("font-size", (d) => d.size)
    .text((d) => d.text)
    .on("click", (event, d) => {
      onNodeClick(d); // Use reusable onClick
    });
}
============================================================================================================================onclick of each line
nodes
  .append("text")
  .attr("text-anchor", "middle")
  .style("font-size", "12px")
  .each(function (d) {
    const textElement = d3.select(this);

    const maxChars = 15; // Max characters per line
    const wrappedName = wrapText(d.data.name, maxChars);
    const wrappedDescription = wrapText(d.data.description, maxChars);
    const wrappedCountry = wrapText(d.data.country, maxChars);

    // Render each line of text for each property
    let yOffset = -20; // Initial vertical offset
    [wrappedName, wrappedDescription, wrappedCountry].forEach((lines, index) => {
      lines.forEach((line, lineIndex) => {
        textElement
          .append("tspan")
          .attr("x", 0) // Center the text horizontally
          .attr("dy", yOffset) // Adjust dy for line breaks
          .style("font-weight", index === 0 ? "bold" : "normal") // Style for the first group
          .style("font-size", index === 0 ? "14px" : index === 1 ? "12px" : "10px") // Adjust font size
          .text(line)
          .on("click", (event, d) => {
            onNodeClick(d, index, line); // Trigger click event for this line
          });

        yOffset = "1.2em"; // Adjust for next line
      });

      // Add extra spacing between sections
      yOffset = "1.5em";
    });
  });

// Helper function for handling the click event
function onNodeClick(d, sectionIndex, clickedLine) {
  const sectionNames = ["Name", "Description", "Country"];
  const sectionName = sectionNames[sectionIndex];

  // Show an alert with the section name and clicked line
  alert(`You clicked on ${sectionName}: ${clickedLine}`);
}




