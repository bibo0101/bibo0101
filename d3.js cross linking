
// Update SVG size dynamically based on node positions
const updateSvgSize = (nodes: any[]) => {
  const xExtent = d3.extent(nodes, (d: any) => d.x); // Get min and max x
  const yExtent = d3.extent(nodes, (d: any) => d.y); // Get min and max y
  
  const padding = 50; // Add some extra padding
  const newWidth = (xExtent[1] - xExtent[0]) + padding * 2;
  const newHeight = (yExtent[1] - yExtent[0]) + padding * 2;

  d3.select('svg')
    .attr('width', Math.max(newWidth, window.innerWidth)) // Ensure at least full window size
    .attr('height', Math.max(newHeight, window.innerHeight));
};

// Call this after layout
updateSvgSize(nodes);







// Add cross-links
const crossLinks = data
  .filter((d) => d.crossLink)
  .map((d) => ({
    source: treeData.descendants().find((node) => node.data.id === d.id),
    target: treeData.descendants().find((node) => node.data.id === d.crossLink)
  }));

// Draw cross-links
svg.selectAll(".cross-link")
  .data(crossLinks)
  .enter()
  .append("path")
  .attr("class", "cross-link")
  .attr("d", (d: any) =>
    d3.linkHorizontal()({
      source: [d.source.y, d.source.x],
      target: [d.target.y, d.target.x]
    })
  )
  .style("stroke", "red")
  .style("stroke-dasharray", "4 2")
  .style("fill", "none");
================================================================ for stratify method
function elbow(d: any) {
  return `M${d.source.y},${d.source.x} H${d.target.y} V${d.target.x}`;
}
----------------------------------------------------------------Add separate cross link path
svg.selectAll(".cross-link")
  .data(flatData.filter((d) => d.crossLink)) // Filter nodes with crossLinks
  .enter()
  .append("path")
  .attr("class", "cross-link")
  .attr("d", (d) => {
    const sourceNode = treeData.descendants().find((n) => n.data.id === d.id);
    const targetNode = treeData.descendants().find((n) => n.data.id === d.crossLink);
    if (sourceNode && targetNode) {
      return `M${sourceNode.y},${sourceNode.x} C${(sourceNode.y + targetNode.y) / 2},${sourceNode.x} ${(sourceNode.y + targetNode.y) / 2},${targetNode.x} ${targetNode.y},${targetNode.x}`;
    }
    return null;
  })
  .style("fill", "none")
  .style("stroke", "red") // Optional: color cross-links differently
  .style("stroke-width", 2)
  .style("stroke-dasharray", "4 2"); // Optional: make dashed
