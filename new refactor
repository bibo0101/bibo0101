import * as d3 from 'd3';

/**
 * Wrap text within a node.
 * @param selection - D3 selection of the text element.
 * @param text - The text content to wrap.
 * @param maxWidth - Maximum width of the node to fit the text.
 */
export const wrapText = (
  selection: d3.Selection<SVGGElement | SVGTextElement, any, any, any>,
  text: string,
  maxWidth: number
) => {
  const words = text.split(' ');
  let line = '';
  let lineNumber = 0;

  const textElement = selection.append('text').attr('x', 0).attr('y', 0);

  words.forEach((word, i) => {
    const testLine = line + (line ? ' ' : '') + word;
    const testWidth = textElement.text(testLine).node()!.getComputedTextLength();

    if (testWidth > maxWidth && line) {
      // Add current line as a tspan
      textElement.append('tspan')
        .attr('x', 0)
        .attr('dy', `${lineNumber++ * 1.2}em`)
        .text(line);
      line = word; // Start new line
    } else {
      line = testLine;
    }
  });

  // Add the last line
  textElement.append('tspan')
    .attr('x', 0)
    .attr('dy', `${lineNumber * 1.2}em`)
    .text(line);
};

===================================

node.each(function (d) {
  const nodeElement = d3.select(this);
  const fontSize = Math.min(12, dynamicHeight / 5); // Scale font size
  const maxWidth = dynamicWidth - 10; // Adjust based on your node width
  const text = nodeElement
    .append('text')
    .attr('x', 0)
    .attr('y', -dynamicHeight / 2 + 8)
    .attr('fill', '#f1f1f1')
    .attr('text-anchor', 'middle')
    .attr('font-size', `${fontSize}px`);

  // Wrap text to fit within node width
  const words = d.data.id.split(' '); // Split text into words
  let line = '';
  let lineNumber = 0;

  words.forEach((word, i) => {
    const testLine = line + (line ? ' ' : '') + word;
    const testLength = text.node()
      .getComputedTextLength();

    if (testLength > maxWidth && line) {
      // If line exceeds max width, create a new tspan
      text.append('tspan')
        .attr('x', 0)
        .attr('dy', `${lineNumber++ * 1.2}em`)
        .text(line);
      line = word; // Start new line with the current word
    } else {
      line = testLine;
    }
  });

  // Append the last line
  text.append('tspan')
    .attr('x', 0)
    .attr('dy', `${lineNumber * 1.2}em`)
    .text(line);
});

---------------------------------------------
import * as d3 from 'd3';

export const initializeChart = (
    svgRef: React.RefObject<SVGSVGElement>,
    data: any,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    if (!svgRef.current) return;

    // Set up SVG
    const svg = d3.select(svgRef.current)
        .attr("viewBox", `0 0 ${dimensions.width} ${dimensions.height}`)
        .attr("preserveAspectRatio", "xMidYMid meet");

    // Clear existing content inside SVG
    svg.selectAll("*").remove();

    // Append group for zoom
    const g = svg.append("g");

    // Initialization code for the chart (nodes, links, etc.)
    const root = d3.hierarchy(data);
    const treeLayout = d3.tree<any>().size([dimensions.height, dimensions.width]);
    treeLayout(root);

    const nodes = root.descendants();
    const links = root.links();

    g.selectAll(".link")
        .data(links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
            .x(d => d.y)
            .y(d => d.x));

    g.selectAll(".node")
        .data(nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`)
        .append("rect")
        .attr("width", 200)
        .attr("height", 50)
        .attr("x", -100)
        .attr("y", -25)
        .on('click', (event, d) => onNodeClick(d.data));
};




----------------------------------------------------------------valpreflowchart.tsx
svg.selectAll<SVGPathElement, d3.HierarchyPointLink<any>>(".link") .data(links) .enter() .append("path") .attr("class", "link") .attr("d", d3.linkHorizontal<d3.HierarchyPointNode<any>, d3.HierarchyPointLink<any>>() .x(d => d.source.y) // Ensure proper type usage .y(d => d.source.x)) // Ensure proper type usage .attr("marker-end", 'url(#arrow-up)') .attr('fill', 'none') .attr('stroke', 'gray') .attr('stroke-width', 1
import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';
import { initializeChart } from './initializeChart';
import { handleResize } from './handleResize';
import { setupZoom } from './setupZoom';
import { updateSvgDimensions } from './updateSvgDimensions';

export const FlowChart: React.FC<{ data: any; onNodeClick: (data: any) => void }> = ({ data, onNodeClick }) => {
    const svgRef = useRef<SVGSVGElement | null>(null);
    const [dimensions, setDimensions] = useState({ width: window.innerWidth, height: window.innerHeight });

    useEffect(() => {
        handleResize(setDimensions);
        window.addEventListener('resize', () => handleResize(setDimensions));
        return () => window.removeEventListener('resize', () => handleResize(setDimensions));
    }, []);

    useEffect(() => {
        if (!data || !svgRef.current) return;
        initializeChart(svgRef.current, data, dimensions, onNodeClick);
        setupZoom(svgRef.current);
    }, [data, dimensions, onNodeClick]);

    return (
        <div className="chart-container">
            <div>
                <svg ref={svgRef} />
            </div>
        </div>
    );
};

---------------------------------handlerezie.tsx
export const handleResize = (setDimensions: React.Dispatch<React.SetStateAction<{ width: number; height: number }>>) => {
    setDimensions({ width: window.innerWidth, height: window.innerHeight });
};
-----------------------------------------------------------------setupzoom.tsx
import * as d3 from 'd3';

export const setupZoom = (svg: SVGSVGElement) => {
    const zoom = d3.zoom<SVGSVGElement, unknown>()
        .scaleExtent([0.5, 5]) // min and max zoom
        .on('zoom', (event) => {
            d3.select(svg).select("g").attr("transform", event.transform);
        });

    d3.select(svg).call(zoom);
};
------------------------------------------------------------setupzoom.tsx
import * as d3 from 'd3';

export const setupZoom = (svg: SVGSVGElement) => {
    const zoom = d3.zoom<SVGSVGElement, unknown>()
        .scaleExtent([0.5, 5]) // min and max zoom
        .on('zoom', (event) => {
            d3.select(svg).select("g").attr("transform", event.transform);
        });

    d3.select(svg).call(zoom);
};
------------------------------------------------------initializingChat.tsx
import * as d3 from 'd3';
import { updateSvgDimensions } from './updateSvgDimensions';

export const initializeChart = (
    svgElement: SVGSVGElement,
    data: any,
    dimensions: { width: number; height: number },
    onNodeClick: (data: any) => void
) => {
    const { width, height } = dimensions;
    const svg = d3.select<SVGSVGElement, unknown>(svgElement)
        .attr("viewBox", `0 0 ${width} ${height}`)
        .attr("preserveAspectRatio", "xMidYMid meet");

    const treeLayout = d3.tree<any>().nodeSize([220, 200]);
    const stratify = d3.stratify<any>()
        .id((d: any) => d.id)
        .parentId((d: any) => d.parentId);

    const root = stratify(data);
    treeLayout(root);

    const nodes = root.descendants();
    const links = root.links();

    svg.selectAll(".link").remove();
    svg.selectAll(".node").remove();

    // Links
    svg.selectAll<SVGPathElement, d3.HierarchyPointLink<any>>(".link")
        .data(links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal<d3.HierarchyPointNode<any>, d3.HierarchyPointLink<any>>()
            .x(d => d.y)
            .y(d => d.x))
        .attr("marker-end", 'url(#arrow-up)')
        .attr('fill', 'none')
        .attr('stroke', 'gray')
        .attr('stroke-width', 1);

    // Nodes
    const node = svg.selectAll<SVGGElement, d3.HierarchyPointNode<any>>(".node")
        .data(nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`);

    node.append("rect")
        .attr("width", 200)
        .attr("height", 50)
        .attr("x", -100)
        .attr("y", -25)
        .style("fill", "#69b3a2")
        .on('click', (event, d) => onNodeClick(d.data));

    node.append("text")
        .attr("dy", ".35em")
        .attr("x", 0)
        .attr("y", 0)
        .style("text-anchor", "middle")
        .text(d => d.data.name);

    // Update SVG dimensions and positions
    updateSvgDimensions(svg, nodes, width, height);
};


------------------------------------------------------------------------updateSvgDimension
import * as d3 from 'd3';

export const updateSvgDimensions = (
    svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any>,
    nodes: d3.HierarchyPointNode<any>[],
    containerWidth: number,
    containerHeight: number
) => {
    // Calculate min and max node positions
    const maxX = d3.max(nodes, (node) => node.x) || 0;
    const minX = d3.min(nodes, (node) => node.x) || 0;
    const maxY = d3.max(nodes, (node) => node.y) || 0;
    const minY = d3.min(nodes, (node) => node.y) || 0;

    // Padding to prevent cutting off nodes
    const padding = 100;

    // Dynamic transform values
    const translateX = Math.abs(minX) + padding; // Shift right so left nodes are visible
    const translateY = padding;

    // Dynamic viewBox calculation
    const viewBoxWidth = maxX - minX + padding * 2;
    const viewBoxHeight = maxY - minY + padding * 2;

    // Update the SVG with the new viewBox and transform
    svg.attr("viewBox", `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`)
        .attr("width", containerWidth)
        .attr("height", containerHeight)
        .append("g")
        .attr("transform", `translate(${translateX},${translateY})`);

    const nodeCount = nodes.length;
    const maxDepth = d3.max(nodes, (d) => d.depth) || 0;

    const nodeSpacingX = Math.max(50, containerWidth / nodeCount);
    const nodeSpacingY = Math.max(70, containerHeight / maxDepth);

    const treeLayout = d3.tree<any>().nodeSize([nodeSpacingX, nodeSpacingY]);

    treeLayout(d3.hierarchy(d3.stratify().id((d: any) => d.id)(nodes)));

    const baseWidth = 200; // Default width
    const baseHeight = 100; // Default height
    const maxNodes = 100; // A threshold for max nodes for scaling

    d3.select(svg.node())
        .attr('width', containerWidth)
        .attr('height', containerHeight)
        .append('g')
        .attr('transform', 'translate(700,50)');

    svg.append('defs').append('marker')
        .attr('id', 'arrow-up')
        .attr('viewBox', '0 -5 10 10')
        .attr('refX', 9) // arrow position along with line
        .attr('refY', 0)
        .attr('markerWidth', 12)
        .attr('markerHeight', 12)
        .attr('orient', 'auto-start-reverse')
        .append('path');
};
