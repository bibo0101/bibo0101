import { render, fireEvent, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { describe, it, expect, vi } from 'vitest';
import { store } from './store'; // Adjust the import path to your actual store file
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUser Info: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    riskScore: {
      baseRiskScore: 1,
      overriddenRiskScore: 2,
    },
    attestationData: {
      attested: false,
      overrideConfirmation: false,
    },
    isAnyOverrides: false,
    fcrmStatus: 'In Progress',
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('renders correctly and displays user data', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Attestation/i)).toBeInTheDocument();
    expect(getByText(/Test User/i)).toBeInTheDocument(); // Check if user data is displayed
  });

  it('handles checkbox interactions correctly', async () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Use act to wrap state updates and interactions
    await act(async () => {
      // Simulate checking the override checkbox
      fireEvent.click(overrideCheckbox);
    });
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate checking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate unchecking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called
  });

  it('handles readOnly state correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...{ ...defaultProps, readOnly: true }} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Check that checkboxes are disabled
    expect(overrideCheckbox).toBeDisabled();
    expect(attestationCheckbox).toBeDisabled();
  });

  it('displays the correct risk score', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Risk Rating for party is:/i)).toBeInTheDocument();
    expect(getByText(/1/i)).toBeInTheDocument(); // Check if the base risk score is displayed
  });
});

================================================================
// Assuming you are using Font Awesome
import { render } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import MyComponent from './MyComponent'; // Adjust the import path as necessary

// Mock the icon library
vi.mock('@fortawesome/react-fontawesome', () => ({
  FontAwesomeIcon: ({ icon }) => <span>{icon.iconName}</span>, // Mock implementation
}));

describe('MyComponent', () => {
  it('renders correctly with a valid icon', () => {
    const { getByText } = render(<MyComponent iconId="check" />);
    
    // Check if the icon is rendered
    expect(getByText('check')).toBeInTheDocument();
  });

  it('handles unknown icons gracefully', () => {
    const { getByText } = render(<MyComponent iconId="unknown" />);
    
    // Check if a fallback or error message is rendered
    expect(getByText('unknown')).toBeInTheDocument(); // Adjust based on your mock implementation
  });
});
=======================================
import { render } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import MyComponent from './MyComponent'; // Adjust the import path as necessary

describe('MyComponent', () => {
  it('renders the check icon correctly', () => {
    const { getByRole } = render(<MyComponent iconId="check" />);
    
    // Check if the icon is rendered
    const icon = getByRole('img'); // Assuming the icon is rendered as an img
    expect(icon).toBeInTheDocument();
  });

  it('throws an error for an unknown icon', () => {
    expect(() => render(<MyComponent iconId="unknown" />)).toThrowError(/No icon found for unknown/);
  });
});
=========================================================
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { describe, it, expect, vi } from 'vitest';
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUser Info: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

// Create a mock store
const mockStore = configureStore([]);

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    riskScore: {
      baseRiskScore: 1,
      overriddenRiskScore: 2,
    },
    attestationData: {
      attested: false,
      overrideConfirmation: false,
    },
    isAnyOverrides: false,
    fcrmStatus: 'In Progress',
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('renders correctly and handles attestation and override changes', () => {
    const store = mockStore({
      riskScore: {
        baseRiskScore: 1,
        overriddenRiskScore: 2,
      },
      attestationData: {
        attested: false,
        overrideConfirmation: false,
      },
      isAnyOverrides: false,
      fcrmStatus: 'In Progress',
    });

    const { getByLabelText, getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    // Check if the component renders the correct text
    expect(getByText(/Attestation/i)).toBeInTheDocument();
    expect(getByText(/You requested a Risk Rating change from/i)).toBeInTheDocument();
    expect(getByText(/Risk Rating for party is:/i)).toBeInTheDocument();

    // Check the initial state of the checkboxes
    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    expect(overrideCheckbox).not.toBeChecked();
    expect(attestationCheckbox).not.toBeChecked();

    // Simulate checking the override checkbox
    fireEvent.click(overrideCheckbox);
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    // Simulate checking the attestation checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    // Simulate unchecking the attestation checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called
  });

  it('handles readOnly state correctly', () => {
    const store = mockStore({
      riskScore: {
        baseRiskScore: 1,
        overriddenRiskScore: 2,
      },
      attestationData: {
        attested: false,
        overrideConfirmation: false,
      },
      isAnyOverrides: false,
      fcrmStatus: 'In Progress',
    });

    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...{ ...defaultProps, readOnly: true }} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Check that checkboxes are disabled
    expect(overrideCheckbox).toBeDisabled();
    expect(attestationCheckbox).toBeDisabled
