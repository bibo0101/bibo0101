import { render, screen, waitFor } from '@testing-library/react';
import { RiskScoreProviderTestWrapper } from './RiskScoreProviderTestWrapper'; // Adjust path
import { useRiskScoreProvider } from '../../hooks/useRiskScoreProvider';
import { vi } from 'vitest';

// Mocking `useRiskScoreProvider`
vi.mock('../../hooks/useRiskScoreProvider', () => ({
  useRiskScoreProvider: vi.fn(),
}));

describe('RiskScoreProviderTestWrapper', () => {
  it('should render children correctly', () => {
    render(
      <RiskScoreProviderTestWrapper>
        <div>Test Child Component</div>
      </RiskScoreProviderTestWrapper>
    );

    expect(screen.getByText('Test Child Component')).toBeInTheDocument();
  });

  it('should call initialiseRiskProvider with correct parameters', async () => {
    const mockInitialiseRiskProvider = vi.fn();
    const mockRiskData = { someData: 123 };
    const mockFcrmRiskDataPayload = { payloadData: 'abc' };
    const mockFcrmEntry = { entryId: 456 };

    // Mocking `useRiskScoreProvider`
    (useRiskScoreProvider as jest.Mock).mockReturnValueOnce({
      initialiseRiskProvider: mockInitialiseRiskProvider,
    });

    render(
      <RiskScoreProviderTestWrapper>
        <div>Test Child Component</div>
      </RiskScoreProviderTestWrapper>
    );

    // Wait for useEffect to execute
    await waitFor(() =>
      expect(mockInitialiseRiskProvider).toHaveBeenCalledWith(
        mockRiskData,
        mockFcrmRiskDataPayload,
        mockFcrmEntry
      )
    );
  });

  it('should not call initialiseRiskProvider if hook returns null', async () => {
    const mockInitialiseRiskProvider = vi.fn();

    // Mock the hook to return `null`
    (useRiskScoreProvider as jest.Mock).mockReturnValueOnce(null);

    render(
      <RiskScoreProviderTestWrapper>
        <div>Test Child Component</div>
      </RiskScoreProviderTestWrapper>
    );

    await waitFor(() =>
      expect(mockInitialiseRiskProvider).not.toHaveBeenCalled()
    );
  });
});

