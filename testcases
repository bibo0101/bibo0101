
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import CLMDate from './CLMDate'; // Adjust the import path based on your project structure

jest.mock('@barclays/blueprint-react', () => ({
  __esModule: true,  // This line indicates that the module is an ES module
  ...jest.requireActual('@barclays/blueprint-react'),
  Icon: () => <span>MockIcon</span>,  // Mock the Icon component
}));

const visibilityRule = { linkedFieldName: 'someField', linkedFieldValue: true };

const componentConfig = {
  fieldName: 'date',
  fieldLabel: 'Date',
  componentType: 'input',
  description: 'Select a date',
  values: ['2025-01-16'],
  isVisible: visibilityRule,
  isEditable: true,
  validation: 'required'
};

test('renders CLMDate component', () => {
  render(<CLMDate componentConfig={componentConfig} value="" handleChange={() => {}} readOnly={false} />);
  const inputElement = screen.getByLabelText('Date');
  expect(inputElement).toBeInTheDocument();
});

test('calls handleChange on input change', () => {
  const handleChange = jest.fn();
  render(<CLMDate componentConfig={componentConfig} value="" handleChange={handleChange} readOnly={false} />);
  const inputElement = screen.getByLabelText('Date');
  fireEvent.change(inputElement, { target: { value: '2025-01-16' } });
  expect(handleChange).toHaveBeenCalledWith('date', '2025-01-16');
});

test('displays error message', () => {
  render(<CLMDate componentConfig={componentConfig} value="" handleChange={() => {}} readOnly={false} errorMessage="Invalid date" />);
  const errorElement = screen.getByText('Invalid date');
  expect(errorElement).toBeInTheDocument();
});

test('renders component as editable or read-only based on isEditable property', () => {
  render(<CLMDate componentConfig={componentConfig} value="" handleChange={() => {}} readOnly={false} />);
  const editableInputElement = screen.getByLabelText('Date');
  expect(editableInputElement).not.toBeDisabled();

  const readOnlyConfig = { ...componentConfig, isEditable: false };
  render(<CLMDate componentConfig={readOnlyConfig} value="" handleChange={() => {}} readOnly={true} />);
  const readOnlyInputElement = screen.getByLabelText('Date');
  expect(readOnlyInputElement).toBeDisabled();
});

=============================================================================
jest.mock('@barclays/blueprint-react', () => {
  const originalModule = jest.requireActual('@barclays/blueprint-react');
  return {
    ...originalModule,
    Icon: ({ icon }) => <span data-testid={`icon-${icon}`}>{icon}</span>, // Mock icon rendering
  };
});

===========================================================================
{
  "targets": {
    "test": {
      "executor": "@nrwl/jest:jest",
      "options": {
        "jestConfig": "apps/your-app/jest.config.ts",
        "passWithNoTests": true
      },
      "outputs": ["coverage/apps/your-app"]
    }
  }
}
==================================================================
nx generate @nrwl/jest:configuration your-app-or-lib-name

==================================================================
import { getJestProjects } from '@nrwl/jest';

export default {
  projects: getJestProjects(),
};
===================================================================
/* jest.config.ts */
export default {
  displayName: 'your-app',
  preset: '../../jest.preset.js',
  testEnvironment: 'jsdom',
  transform: {
    '^.+\\.[tj]sx?$': 'ts-jest',
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../../coverage/apps/your-app',
  setupFilesAfterEnv: ['<rootDir>/src/test-setup.ts'],
};
==================================================================
import '@testing-library/jest-dom';

==================================================================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { CLMDate } from "./CLMDate"; // Replace with your actual file path
import { ICLMDate } from "./CLMDate.types"; // Replace with your actual interface path

describe("CLMDate Component", () => {
  const mockHandleChange = jest.fn();

  const defaultProps: ICLMDate = {
    componentConfig: {
      fieldName: "testDate",
      fieldLabel: "Test Date",
      description: "Select a date",
    },
    handleChange: mockHandleChange,
    value: "2025-01-01",
    errorMessage: "",
    readOnly: false,
  };

  it("renders the component correctly", () => {
    render(<CLMDate {...defaultProps} />);

    // Check if label is rendered
    expect(screen.getByText("Test Date")).toBeInTheDocument();
    // Check if description is rendered
    expect(screen.getByText("Select a date")).toBeInTheDocument();
    // Check if input is rendered
    const input = screen.getByRole("textbox");
    expect(input).toBeInTheDocument();
    expect(input).toHaveValue("2025-01-01");
  });

  it("calls handleChange when input value changes", () => {
    render(<CLMDate {...defaultProps} />);

    const input = screen.getByRole("textbox");
    fireEvent.change(input, { target: { value: "2025-02-01" } });

    expect(mockHandleChange).toHaveBeenCalledTimes(1);
    expect(mockHandleChange).toHaveBeenCalledWith("testDate", "2025-02-01");
  });

  it("displays an error message if provided", () => {
    render(
      <CLMDate
        {...defaultProps}
        errorMessage="This field is required"
      />
    );

    // Check if the error message is displayed
    expect(screen.getByText("This field is required")).toBeInTheDocument();
  });

  it("disables the input when readOnly is true", () => {
    render(
      <CLMDate
        {...defaultProps}
        readOnly={true}
      />
    );

    const input = screen.getByRole("textbox");
    expect(input).toBeDisabled();
  });

  it("renders the calendar icon", () => {
    render(<CLMDate {...defaultProps} />);

    const calendarIcon = screen.getByLabelText("calendar");
    expect(calendarIcon).toBeInTheDocument();
  });

  it("renders without crashing when section prop is provided", () => {
    render(<CLMDate {...defaultProps} section="Test Section" />);

    // Check if component renders properly with the section prop
    expect(screen.getByText("Test Date")).toBeInTheDocument();
  });
});
=================================================================================================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { CLMDate } from "./CLMDate"; // Replace with the correct file path
import { ICLMdate } from "./CLMDate.types"; // Replace with the correct file path

const defaultProps: ICLMdate = {
  componentConfig: {
    fieldName: "testDate",
    fieldLabel: "Test Date",
    description: "Select a date",
  },
  section: "General",
  handleChange: jest.fn(),
  value: "2025-01-01",
  errorMessage: "",
  readOnly: false,
};

describe("CLMDate Component", () => {
  it("renders the component with label, description, and input field", () => {
    render(<CLMDate {...defaultProps} />);

    // Check the label
    expect(screen.getByText("Test Date")).toBeInTheDocument();

    // Check the description
    expect(screen.getByText("Select a date")).toBeInTheDocument();

    // Check the input field
    const input = screen.getByDisplayValue("2025-01-01");
    expect(input).toBeInTheDocument();
    expect(input).toHaveAttribute("type", "date");
  });

  it("calls handleChange when the input value changes", () => {
    render(<CLMDate {...defaultProps} />);

    // Find the input element
    const input = screen.getByDisplayValue("2025-01-01");

    // Simulate changing the input value
    fireEvent.change(input, { target: { value: "2025-02-01" } });

    // Check if handleChange was called with the correct arguments
    expect(defaultProps.handleChange).toHaveBeenCalledWith(
      "testDate",
      "2025-02-01"
    );
  });

  it("displays an error message when errorMessage prop is provided", () => {
    const propsWithError = {
      ...defaultProps,
      errorMessage: "Invalid date",
    };

    render(<CLMDate {...propsWithError} />);

    // Check if the error message is displayed
    expect(screen.getByText("Invalid date")).toBeInTheDocument();
  });

  it("renders a disabled input when readOnly is true", () => {
    const readOnlyProps = {
      ...defaultProps,
      readOnly: true,
    };

    render(<CLMDate {...readOnlyProps} />);

    // Check if the input is disabled
    const input = screen.getByDisplayValue("2025-01-01");
    expect(input).toBeDisabled();
  });
});
===========================================================================================
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { CLMDate } from './CLMDate';
import { ICLMdate } from './CLMDate.types';

describe('CLMDate Component', () => {
  it('should render the CLMDate component correctly', () => {
    // Mock handleChange function
    const mockHandleChange = jest.fn();

    // Default props for the component
    const defaultProps: ICLMdate = {
      componentConfig: {
        fieldName: 'testField',
        fieldLabel: 'Test Label',
        description: 'Test Description',
      },
      handleChange: mockHandleChange,
      value: '2024-01-01',
      errorMessage: '',
      readOnly: false,
    };

    // Render the component
    render(<CLMDate {...defaultProps} />);

    // Find elements in the component
    const inputElement = screen.getByRole('textbox');
    const labelElement = screen.getByText('Test Label');
    const descriptionElement = screen.getByText('Test Description');

    // Assertions: Input field, label, and description should be present
    expect(inputElement).toBeInTheDocument();
    expect(labelElement).toBeInTheDocument();
    expect(descriptionElement).toBeInTheDocument();

    // Assert input attributes
    expect(inputElement).toHaveAttribute('type', 'date');
    expect(inputElement).toHaveAttribute('value', '2024-01-01');
    expect(inputElement).not.toBeDisabled();
  });

  it('should call handleChange when input value changes', () => {
    // Mock handleChange function
    const mockHandleChange = jest.fn();

    // Default props
    const defaultProps: ICLMdate = {
      componentConfig: {
        fieldName: 'testField',
        fieldLabel: 'Test Label',
        description: 'Test Description',
      },
      handleChange: mockHandleChange,
      value: '2024-01-01',
      errorMessage: '',
      readOnly: false,
    };

    // Render the component
    render(<CLMDate {...defaultProps} />);

    // Find the input element
    const inputElement = screen.getByRole('textbox');

    // Simulate a change event
    fireEvent.change(inputElement, { target: { value: '2024-02-01' } });

    // Assert handleChange was called with correct arguments
    expect(mockHandleChange).toHaveBeenCalledWith('testField', '2024-02-01');
  });

  it('should render an error message if provided', () => {
    // Default props with an error message
    const defaultProps: ICLMdate = {
      componentConfig: {
        fieldName: 'testField',
        fieldLabel: 'Test Label',
        description: 'Test Description',
      },
      handleChange: jest.fn(),
      value: '2024-01-01',
      errorMessage: 'Invalid date',
      readOnly: false,
    };

    // Render the component
    render(<CLMDate {...defaultProps} />);

    // Find the error message
    const errorElement = screen.getByText('Invalid date');

    // Assert the error message is rendered
    expect(errorElement).toBeInTheDocument();
  });

  it('should disable the input field if readOnly is true', () => {
    // Default props with readOnly set to true
    const defaultProps: ICLMdate = {
      componentConfig: {
        fieldName: 'testField',
        fieldLabel: 'Test Label',
        description: 'Test Description',
      },
      handleChange: jest.fn(),
      value: '2024-01-01',
      errorMessage: '',
      readOnly: true,
    };

    // Render the component
    render(<CLMDate {...defaultProps} />);

    // Find the input element
    const inputElement = screen.getByRole('textbox');

    // Assert the input field is disabled
    expect(inputElement).toBeDisabled();
  });
})
=================================================================================
test('renders CLMDate component', () => {
  const componentConfig = { fieldName: 'date', fieldLabel: 'Date', description: 'Select a date' };
  render(<CLMDate componentConfig={componentConfig} value="" handleChange={() => {}} readOnly={false} />);
  
  const inputElement = screen.getByLabelText('Date');
  expect(inputElement).toBeInTheDocument();
});



