import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import RiskOverridePage from './RiskOverridePage';
import { initialiseOverrideValidationStatus } from 'src/redux/slices/overrideValidationStatusSlice';
import { useDispatch } from 'react-redux';
import { vi } from 'vitest';

const mockStore = configureStore([]);

vi.mock('react-redux', () => ({
  useDispatch: vi.fn(),
  useSelector: vi.fn(),
}));

describe('RiskOverridePage', () => {
  let store: any;
  let dispatch: any;

  beforeEach(() => {
    dispatch = vi.fn();
    (useDispatch as jest.Mock).mockReturnValue(dispatch);
    
    store = mockStore({
      riskData: {
        riskItems: {},
        areRisksOverridden: false,
        isPep: false,
      },
      generalData: {
        isFcrmReadOnly: false,
        invalidFields: false,
      },
      attestations: {
        attestation: false,
        overrideCom: false,
      },
    });

    store.dispatch = dispatch; // Ensure dispatch is correctly mocked
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <RiskOverridePage />
      </Provider>
    );
    expect(screen.getByText(/Attestation Panel/i)).toBeInTheDocument();
  });

  test('displays ErrorPanel when showErrorPanel is true', () => {
    const newStore = mockStore({
      ...store.getState(),
      generalData: {
        ...store.getState().generalData,
        invalidFields: true,
      },
    });

    render(
      <Provider store={newStore}>
        <RiskOverridePage />
      </Provider>
    );

    expect(screen.getByText(/Error Panel/i)).toBeInTheDocument();
  });

  test('displays RiskOverridePanel for each risk item', () => {
    const riskItems = new Map();
    riskItems.set('level1', [{ riskName: 'Risk 1' }, { riskName: 'Risk 2' }]);

    const newStore = mockStore({
      ...store.getState(),
      riskData: {
        ...store.getState().riskData,
        riskItems: Object.fromEntries(riskItems), // Convert Map to Object
      },
    });

    render(
      <Provider store={newStore}>
        <RiskOverridePage />
      </Provider>
    );

    expect(screen.getAllByText(/Risk/i)).toHaveLength(2);
  });

  test('displays PepJustificationPanel when isPep is true', () => {
    const newStore = mockStore({
      ...store.getState(),
      riskData: {
        ...store.getState().riskData,
        isPep: true,
      },
    });

    render(
      <Provider store={newStore}>
        <RiskOverridePage />
      </Provider>
    );

    expect(screen.getByText(/Pep Justification Panel/i)).toBeInTheDocument();
  });

  test('dispatches initialiseOverrideValidationStatus on mount', () => {
    render(
      <Provider store={store}>
        <RiskOverridePage />
      </Provider>
    );

    expect(dispatch).toHaveBeenCalledWith(initialiseOverrideValidationStatus(expect.any(Object)));
  });
});

=============================================
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import ConfirmationPage from './ConfirmationPage';
import generalDataReducer from '../../redux/slices/generalDataSlice';

const mockStore = (partyData) => {
  return configureStore({
    reducer: {
      generalData: () => ({
        partyData,
      }),
    },
  });
};

describe('ConfirmationPage', () => {
  it('renders the success alert with the party name', () => {
    const partyData = { name: 'Test Party' };
    const store = mockStore(partyData);

    render(
      <Provider store={store}>
        <ConfirmationPage />
      </Provider>
    );

    expect(screen.getByText(/Test Party/i)).toBeInTheDocument(); // Updated check
    expect(screen.getByRole('alert')).toHaveClass('bp4-alert-success');
  });

  it('displays next steps correctly', () => {
    const partyData = { name: 'Test Party' };
    const store = mockStore(partyData);

    render(
      <Provider store={store}>
        <ConfirmationPage />
      </Provider>
    );

    expect(screen.getByText(/Next steps:/i)).toBeInTheDocument();
    expect(screen.getByText(/Override approval required/i)).toBeInTheDocument();
    expect(screen.getByText(/Refer to Private Bank CDD Procedures/i)).toBeInTheDocument();
    expect(screen.getByText(/Enhanced Due Diligence/i)).toBeInTheDocument();
  });

  it('renders success icon correctly', () => {
    const partyData = { name: 'Test Party' };
    const store = mockStore(partyData);

    render(
      <Provider store={store}>
        <ConfirmationPage />
      </Provider>
    );

    const icon = screen.getByRole('img', { hidden: true }); // Updated to check hidden images too
    expect(icon).toHaveClass('bp4-icon-success');
  });

  it('does not render alert if party data is not available', () => {
    const store = mockStore(null);

    render(
      <Provider store={store}>
        <ConfirmationPage />
      </Provider>
    );

    expect(screen.queryByRole('alert')).toBeNull();
  });
});
===============================================
import { render, screen, waitFor } from '@testing-library/react';
import RiskOverridePage from './RiskOverridePage';
import { vi } from 'vitest';
import { useSelector, useDispatch } from 'react-redux';

// Mock the useSelector and useDispatch hooks
vi.mock('react-redux', () => ({
  useDispatch: vi.fn(),
  useSelector: vi.fn(),
}));

describe('RiskOverridePage', () => {
  let mockDispatch: vi.Mock;

  beforeEach(() => {
    // Reset the mock functions before each test
    mockDispatch = vi.fn();
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockReset();
  });

  it('should render the component correctly', () => {
    // Mock Redux state in the correct order
    useSelector.mockReturnValueOnce(false); // isFcrmReadOnly
    useSelector.mockReturnValueOnce(false); // showErrorPanel
    useSelector.mockReturnValueOnce(new Map()); // riskItems
    useSelector.mockReturnValueOnce(false); // isPep
    useSelector.mockReturnValueOnce(false); // isAnyOverrides
    useSelector.mockReturnValueOnce({}); // attestationData

    render(<RiskOverridePage />);

    // Ensure AttestationPanel is rendered correctly
    expect(screen.getByText(/attestation/i)).toBeInTheDocument();
  });

  it('should display RiskOverridePanel for riskItems', async () => {
    // Mock riskItems and isFcrmReadOnly state
    const mockRiskItems = new Map([
      [1, [{ riskName: 'Risk 1' }, { riskName: 'Risk 2' }]],
    ]);
    
    useSelector.mockReturnValueOnce(false); // isFcrmReadOnly
    useSelector.mockReturnValueOnce(false); // showErrorPanel
    useSelector.mockReturnValueOnce(mockRiskItems); // riskItems
    useSelector.mockReturnValueOnce(false); // isPep
    useSelector.mockReturnValueOnce(false); // isAnyOverrides
    useSelector.mockReturnValueOnce({}); // attestationData

    render(<RiskOverridePage />);

    // Ensure that the RiskOverridePanel for 'Risk 1' and 'Risk 2' is rendered
    await waitFor(() => expect(screen.getByText(/Risk 1/i)).toBeInTheDocument());
    await waitFor(() => expect(screen.getByText(/Risk 2/i)).toBeInTheDocument());
  });

  it('should show ErrorPanel when there are invalid fields', () => {
    // Mock Redux state for error panel visibility
    useSelector.mockReturnValueOnce(false); // isFcrmReadOnly
    useSelector.mockReturnValueOnce(true); // showErrorPanel
    useSelector.mockReturnValueOnce(new Map()); // riskItems
    useSelector.mockReturnValueOnce(false); // isPep
    useSelector.mockReturnValueOnce(false); // isAnyOverrides
    useSelector.mockReturnValueOnce({}); // attestationData

    render(<RiskOverridePage />);

    // Check if ErrorPanel is rendered when showErrorPanel is true
    expect(screen.getByText(/error/i)).toBeInTheDocument();
  });

  it('should render PepJustificationPanel when isPep is true', () => {
    // Mock Redux state for isPep condition
    useSelector.mockReturnValueOnce(false); // isFcrmReadOnly
    useSelector.mockReturnValueOnce(false); // showErrorPanel
    useSelector.mockReturnValueOnce(new Map()); // riskItems
    useSelector.mockReturnValueOnce(true); // isPep
    useSelector.mockReturnValueOnce(false); // isAnyOverrides
    useSelector.mockReturnValueOnce({}); // attestationData

    render(<RiskOverridePage />);

    // Ensure that PepJustificationPanel is rendered
    expect(screen.getByText(/pep justification/i)).toBeInTheDocument();
  });
});

=====================================================
import { render, screen, waitFor } from '@testing-library/react';
import RiskOverridePage from './RiskOverridePage';
import { vi } from 'vitest';
import { useSelector, useDispatch } from 'react-redux';

// Mock react-redux hooks
vi.mock('react-redux', () => ({
  useDispatch: vi.fn(),
  useSelector: vi.fn(),
}));

describe('RiskOverridePage', () => {
  const mockDispatch = vi.fn();

  beforeEach(() => {
    useSelector.mockReset();
    useDispatch.mockReturnValue(mockDispatch);
  });

  it('should render the component correctly', () => {
    // Ensure riskScore is included in the mock Redux state
    useSelector
      .mockReturnValueOnce(false) // isFcrmReadOnly
      .mockReturnValueOnce(false) // showErrorPanel
      .mockReturnValueOnce(new Map()) // riskItems
      .mockReturnValueOnce(false) // isPep
      .mockReturnValueOnce(false) // isAnyOverrides
      .mockReturnValueOnce({}) // attestationData
      .mockReturnValueOnce({ baseRiskScore: 85, overriddenRiskScore: 90 }); // riskScore mock

    render(<RiskOverridePage />);

    expect(screen.getByText(/Attestation/i)).toBeInTheDocument();
  });
});

========================================================
import { render, screen, waitFor } from '@testing-library/react';
import RiskOverridePage from './RiskOverridePage'; // Ensure correct import
import { vi } from 'vitest';
import { useSelector, useDispatch } from 'react-redux';

// Mock the useSelector and useDispatch hooks
vi.mock('react-redux', () => ({
  useDispatch: vi.fn(),
  useSelector: vi.fn(),
}));

describe('RiskOverridePage', () => {
  const mockDispatch = vi.fn();

  beforeEach(() => {
    // Reset the mock functions before each test
    useSelector.mockReset();
    useDispatch.mockReturnValue(mockDispatch); // Ensure dispatch is always a function
  });

  it('should render the component correctly', () => {
    useSelector.mockImplementation((selector) => {
      switch (selector.name) {
        case 'getIsFcrmReadOnly':
          return false;
        case 'getInvalidFieldsErrorPanelState':
          return false;
        case 'getRiskItems':
          return new Map();
        case 'isPep':
          return false;
        case 'getAreRisksOverridden':
          return false;
        case 'attestationData':
          return {};
        default:
          return undefined;
      }
    });

    render(<RiskOverridePage />);

    // Ensure the attestation panel is rendered
    expect(screen.getByTestId('attestation-panel')).toBeInTheDocument();
  });

  it('should display RiskOverridePanel for riskItems', async () => {
    const mockRiskItems = new Map([
      [1, [{ riskName: 'Risk 1' }, { riskName: 'Risk 2' }]],
    ]);

    useSelector.mockImplementation((selector) => {
      switch (selector.name) {
        case 'getIsFcrmReadOnly':
          return false;
        case 'getInvalidFieldsErrorPanelState':
          return false;
        case 'getRiskItems':
          return mockRiskItems;
        case 'isPep':
          return false;
        case 'getAreRisksOverridden':
          return false;
        case 'attestationData':
          return {};
        default:
          return undefined;
      }
    });

    render(<RiskOverridePage />);

    // Ensure that the RiskOverridePanel for 'Risk 1' and 'Risk 2' is rendered
    await waitFor(() => expect(screen.getByText('Risk 1')).toBeInTheDocument());
    await waitFor(() => expect(screen.getByText('Risk 2')).toBeInTheDocument());
  });

  it('should show ErrorPanel when there are invalid fields', () => {
    useSelector.mockImplementation((selector) => {
      if (selector.name === 'getInvalidFieldsErrorPanelState') {
        return true;
      }
      return false;
    });

    render(<RiskOverridePage />);

    // Check if ErrorPanel is rendered when showErrorPanel is true
    expect(screen.getByTestId('error-panel')).toBeInTheDocument();
  });

  it('should render PepJustificationPanel when isPep is true', () => {
    useSelector.mockImplementation((selector) => {
      if (selector.name === 'isPep') {
        return true;
      }
      return false;
    });

    render(<RiskOverridePage />);

    // Ensure that PepJustificationPanel is rendered
    expect(screen.getByTestId('pep-justification-panel')).toBeInTheDocument();
  });
});

