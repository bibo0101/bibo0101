


import { render, screen, waitFor } from "@testing-library/react";
import Alerts from "../path-to-alerts-component/Alerts";
import { useContentProvider } from "../../hooks/useContentProvider";
import userEvent from "@testing-library/user-event";

jest.mock("../../hooks/useContentProvider");

describe("Alerts Component", () => {
  test("renders success alert", async () => {
    (useContentProvider as jest.Mock).mockReturnValue({
      fcrmAlert: { status: "success", message: "Operation successful" },
      updateFcrmAlterts: jest.fn(),
    });

    render(<Alerts />);

    expect(await screen.findByText("Success")).toBeInTheDocument();
    expect(await screen.findByText("Operation successful")).toBeInTheDocument();
    expect(screen.getByLabelText("success icon label")).toBeInTheDocument();
  });

  test("renders error alert", async () => {
    (useContentProvider as jest.Mock).mockReturnValue({
      fcrmAlert: { status: "error", message: "Operation failed" },
      updateFcrmAlterts: jest.fn(),
    });

    render(<Alerts />);

    expect(await screen.findByText("Error")).toBeInTheDocument();
    expect(await screen.findByText("Operation failed")).toBeInTheDocument();
    expect(screen.getByLabelText("error icon label")).toBeInTheDocument();
  });

  test("dismiss alert on close", async () => {
    const updateFcrmAltertsMock = jest.fn();

    (useContentProvider as jest.Mock).mockReturnValue({
      fcrmAlert: { status: "success", message: "Operation successful" },
      updateFcrmAlterts: updateFcrmAltertsMock,
    });

    render(<Alerts />);

    const closeButton = screen.getByRole("button");
    await userEvent.click(closeButton);

    await waitFor(() => {
      expect(updateFcrmAltertsMock).toHaveBeenCalledWith(undefined);
    });
  });
});








=====================================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import attestationReducer from '../../../redux/slices/attestationSlice'; // Path to your actual reducer
import { AttestationPanel } from '../AttestationPanel'; // Path to your component
import { updateFcrmAttestation } from '../../../redux/actions'; // Path to your action creators

describe('AttestationPanel Component', () => {
  let store;

  // Initialize the store with the real reducer and state
  beforeEach(() => {
    store = configureStore({
      reducer: {
        attestation: attestationReducer, // Use the real reducer
      },
      preloadedState: {
        attestation: {
          attestationData: {
            attestedBy: false,
            attestation: false,
            overrideConfirmation: false,
          },
          riskScore: { level: 'Medium' },
          isAnyOverrides: false,
          fcrmStatus: 'Active',
        },
      },
    });
  });

  it('renders AttestationPanel correctly', () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    expect(screen.getByText('Risk Score: Medium')).toBeInTheDocument();
  });

  it('disables inputs when readOnly prop is true', () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={true} />
      </Provider>
    );

    const checkbox = screen.getByTestId('attestation-checkbox');
    expect(checkbox).toBeDisabled();
  });

  it('enables inputs when readOnly prop is false', () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    const checkbox = screen.getByTestId('attestation-checkbox');
    expect(checkbox).not.toBeDisabled();
  });

  it('updates attestation state when checkbox is clicked', async () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    const checkbox = screen.getByTestId('attestation-checkbox');
    fireEvent.click(checkbox);

    // Wait for the state change and check the updated state in Redux store
    await waitFor(() => {
      const updatedState = store.getState().attestation.attestationData.attestation;
      expect(updatedState).toBe(true); // Check if state was updated correctly
    });
  });

  it('updates override attestation when checkbox is clicked', async () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    const overrideCheckbox = screen.getByTestId('override-checkbox');
    fireEvent.click(overrideCheckbox);

    // Wait for the state change and check the updated state in Redux store
    await waitFor(() => {
      const updatedOverride = store.getState().attestation.attestationData.overrideConfirmation;
      expect(updatedOverride).toBe(true); // Check if override state was updated correctly
    });
  });

  it('displays risk score from Redux store', () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    expect(screen.getByText('Risk Score: Medium')).toBeInTheDocument();
  });

  it('renders correct FCRM status from Redux store', () => {
    render(
      <Provider store={store}>
        <AttestationPanel readOnly={false} />
      </Provider>
    );

    expect(screen.getByText('FCRM Status: Active')).toBeInTheDocument();
  });
});

===================================================================
import { render, screen, fireEvent } from '@testing-library/react';
import AttestationCheckbox from './AttestationCheckbox'; // Adjust the import path as necessary

describe('AttestationCheckbox', () => {
  const mockUpdateAttestation = jest.fn();

  it('should toggle checkbox state and call update function', () => {
    render(<AttestationCheckbox readOnly={false} updateAttestation={mockUpdateAttestation} />);

    const checkbox = screen.getByLabelText(/I have answered to the best of my knowledge/i);

    // Initially, the checkbox should be unchecked
    expect(checkbox).not.toBeChecked();

    // Simulate a click to check the checkbox
    fireEvent.click(checkbox);
    expect(checkbox).toBeChecked();
    expect(mockUpdateAttestation).toHaveBeenCalledWith(true);

    // Simulate a click to uncheck the checkbox
    fireEvent.click(checkbox);
    expect(checkbox).not.toBeChecked();
    expect(mockUpdateAttestation).toHaveBeenCalledWith(false);
  });
});
==============

import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { store } from './store'; // Adjust the import path to your actual store file
import { describe, it, expect, vi } from 'vitest';
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUserInfo: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('sets attestation correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge/i);
    
    // Initially, the checkbox should be unchecked
    expect(attestationCheckbox).not.toBeChecked();

    // Check the checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalledWith(true, false); // Check if the update function was called with correct parameters

    // Uncheck the checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalledWith(false, false); // Check if the update function was called with correct parameters
  });

  it('sets override attestation correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    
    // Initially, the checkbox should be unchecked
    expect(overrideCheckbox).not.toBeChecked();

    // Check the checkbox
    fireEvent.click(overrideCheckbox);
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalledWith(false, true); // Check if the update function was called with correct parameters

    // Uncheck the checkbox
    fireEvent.click(overrideCheckbox);
    expect(overrideCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalledWith(false, false); // Check if the update function was called with correct parameters
  });

  it('returns correct attestation data', () => {
    const { result } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    // Access the instance of the component to call the method directly
    const attestationData = result.current.getAttestationWithUserData();
    
    expect(attestationData).toEqual({
      attested: false,
      overrideConfirmation: false,
    });
  });
});
===================================================
import { render, screen } from "@testing-library/react";
import AttestationPanel from "../AttestationPanel";

test("renders multiple Blueprint icons correctly", () => {
  render(<AttestationPanel />);

  expect(screen.getByTestId("mock-icon-tick-circle")).toBeInTheDocument();
  expect(screen.getByTestId("mock-icon-warning-sign")).toBeInTheDocument();
});

-=================================================
(global as any).iconSet = {
  1776: 'tick',
  1777: 'success',
  // Add other mock icons if needed
} as { [key: number]: string };

===============================================================

import { render, fireEvent, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { describe, it, expect, vi } from 'vitest';
import { store } from './store'; // Adjust the import path to your actual store file
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUserInfo: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

// Mock iconSet
const mockIconSet = {
  1776: 'mockIconPath',
  // Add other mock icons if needed
};

beforeAll(() => {
  global.iconSet = mockIconSet; // Replace the actual iconSet with the mock version
});

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    riskScore: {
      baseRiskScore: 1,
      overriddenRiskScore: 2,
    },
    attestationData: {
      attested: false,
      overrideConfirmation: false,
    },
    isAnyOverrides: false,
    fcrmStatus: 'In Progress',
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('renders correctly and displays user data', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Attestation/i)).toBeInTheDocument();
    expect(getByText(/Test User/i)).toBeInTheDocument(); // Check if user data is displayed
  });

  it('handles checkbox interactions correctly', async () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Use act to wrap state updates and interactions
    await act(async () => {
      // Simulate checking the override checkbox
      fireEvent.click(overrideCheckbox);
    });
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate checking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate unchecking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called
  });

  it('handles readOnly state correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...{ ...defaultProps, readOnly: true }} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Check that checkboxes are disabled
    expect(overrideCheckbox).toBeDisabled();
    expect(attestationCheckbox).toBeDisabled();
  });

  it('displays the correct risk score', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Risk Rating for party is:/i)).toBeInTheDocument();
    expect(getByText(/1/i)).toBeInTheDocument(); // Check if the base risk score is displayed
  });
});


===============================================================
import { render, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import store from "path-to-your-store"; // Import your actual store
import AttestationPanel from "path-to-your-component/AttestationPanel";
import { describe, it, expect } from "vitest";

// Mock Barclays Blueprint React icons
jest.mock("@barclays/blueprint-react", () => ({
  Icon: ({ icon }) => <span data-testid={icon}>Mocked Icon</span>,
}));

describe("AttestationPanel Component", () => {
  it("renders without crashing", () => {
    render(
      <Provider store={store}>
        <AttestationPanel />
      </Provider>
    );

    expect(screen.getByText(/Attestation Panel/i)).toBeInTheDocument();
  });

  it("renders tick icon when conditions are met", () => {
    render(
      <Provider store={store}>
        <AttestationPanel />
      </Provider>
    );

    const tickIcon = screen.queryByTestId("tick-icon"); // Ensure test ID exists
    expect(tickIcon).toBeInTheDocument();
  });
});
=================================

import React from "react";
import { render, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import store from "path-to-your-store"; // Import your actual Redux store
import AttestationPanel from "path-to-your-component/AttestationPanel";

describe("AttestationPanel Component", () => {
  test("renders AttestationPanel without crashing", () => {
    render(
      <Provider store={store}>
        <AttestationPanel />
      </Provider>
    );

    // Example assertion: Check if heading is present
    expect(screen.getByText(/Attestation Panel/i)).toBeInTheDocument();
  });

  test("renders a tick icon when conditions are met", () => {
    render(
      <Provider store={store}>
        <AttestationPanel />
      </Provider>
    );

    const tickIcon = screen.queryByTestId("tick-icon"); // Ensure the icon has data-testid="tick-icon"
    expect(tickIcon).toBeInTheDocument();
  });
});

====================================
import { render, fireEvent, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { describe, it, expect, vi } from 'vitest';
import { store } from './store'; // Adjust the import path to your actual store file
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUser Info: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    riskScore: {
      baseRiskScore: 1,
      overriddenRiskScore: 2,
    },
    attestationData: {
      attested: false,
      overrideConfirmation: false,
    },
    isAnyOverrides: false,
    fcrmStatus: 'In Progress',
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('renders correctly and displays user data', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Attestation/i)).toBeInTheDocument();
    expect(getByText(/Test User/i)).toBeInTheDocument(); // Check if user data is displayed
  });

  it('handles checkbox interactions correctly', async () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Use act to wrap state updates and interactions
    await act(async () => {
      // Simulate checking the override checkbox
      fireEvent.click(overrideCheckbox);
    });
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate checking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    await act(async () => {
      // Simulate unchecking the attestation checkbox
      fireEvent.click(attestationCheckbox);
    });
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called
  });

  it('handles readOnly state correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...{ ...defaultProps, readOnly: true }} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Check that checkboxes are disabled
    expect(overrideCheckbox).toBeDisabled();
    expect(attestationCheckbox).toBeDisabled();
  });

  it('displays the correct risk score', () => {
    const { getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    expect(getByText(/Risk Rating for party is:/i)).toBeInTheDocument();
    expect(getByText(/1/i)).toBeInTheDocument(); // Check if the base risk score is displayed
  });
});

================================================================
// Assuming you are using Font Awesome
import { render } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import MyComponent from './MyComponent'; // Adjust the import path as necessary

// Mock the icon library
vi.mock('@fortawesome/react-fontawesome', () => ({
  FontAwesomeIcon: ({ icon }) => <span>{icon.iconName}</span>, // Mock implementation
}));

describe('MyComponent', () => {
  it('renders correctly with a valid icon', () => {
    const { getByText } = render(<MyComponent iconId="check" />);
    
    // Check if the icon is rendered
    expect(getByText('check')).toBeInTheDocument();
  });

  it('handles unknown icons gracefully', () => {
    const { getByText } = render(<MyComponent iconId="unknown" />);
    
    // Check if a fallback or error message is rendered
    expect(getByText('unknown')).toBeInTheDocument(); // Adjust based on your mock implementation
  });
});
=======================================
import { render } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import MyComponent from './MyComponent'; // Adjust the import path as necessary

describe('MyComponent', () => {
  it('renders the check icon correctly', () => {
    const { getByRole } = render(<MyComponent iconId="check" />);
    
    // Check if the icon is rendered
    const icon = getByRole('img'); // Assuming the icon is rendered as an img
    expect(icon).toBeInTheDocument();
  });

  it('throws an error for an unknown icon', () => {
    expect(() => render(<MyComponent iconId="unknown" />)).toThrowError(/No icon found for unknown/);
  });
});
=========================================================
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { describe, it, expect, vi } from 'vitest';
import AttestationPanel from './AttestationPanel'; // Adjust the import path as necessary

// Mock the necessary functions and data
vi.mock('../../helpers/userDetails', () => ({
  getUser Info: vi.fn(() => ({
    userName: 'Test User',
    userBrid: '12345',
  })),
}));

// Create a mock store
const mockStore = configureStore([]);

describe('AttestationPanel', () => {
  const mockUpdateFcrmAttestation = vi.fn();

  const defaultProps = {
    readOnly: false,
    riskScore: {
      baseRiskScore: 1,
      overriddenRiskScore: 2,
    },
    attestationData: {
      attested: false,
      overrideConfirmation: false,
    },
    isAnyOverrides: false,
    fcrmStatus: 'In Progress',
    updateFcrmAttestation: mockUpdateFcrmAttestation,
  };

  it('renders correctly and handles attestation and override changes', () => {
    const store = mockStore({
      riskScore: {
        baseRiskScore: 1,
        overriddenRiskScore: 2,
      },
      attestationData: {
        attested: false,
        overrideConfirmation: false,
      },
      isAnyOverrides: false,
      fcrmStatus: 'In Progress',
    });

    const { getByLabelText, getByText } = render(
      <Provider store={store}>
        <AttestationPanel {...defaultProps} />
      </Provider>
    );

    // Check if the component renders the correct text
    expect(getByText(/Attestation/i)).toBeInTheDocument();
    expect(getByText(/You requested a Risk Rating change from/i)).toBeInTheDocument();
    expect(getByText(/Risk Rating for party is:/i)).toBeInTheDocument();

    // Check the initial state of the checkboxes
    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    expect(overrideCheckbox).not.toBeChecked();
    expect(attestationCheckbox).not.toBeChecked();

    // Simulate checking the override checkbox
    fireEvent.click(overrideCheckbox);
    expect(overrideCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    // Simulate checking the attestation checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called

    // Simulate unchecking the attestation checkbox
    fireEvent.click(attestationCheckbox);
    expect(attestationCheckbox).not.toBeChecked();
    expect(mockUpdateFcrmAttestation).toHaveBeenCalled(); // Check if the update function was called
  });

  it('handles readOnly state correctly', () => {
    const store = mockStore({
      riskScore: {
        baseRiskScore: 1,
        overriddenRiskScore: 2,
      },
      attestationData: {
        attested: false,
        overrideConfirmation: false,
      },
      isAnyOverrides: false,
      fcrmStatus: 'In Progress',
    });

    const { getByLabelText } = render(
      <Provider store={store}>
        <AttestationPanel {...{ ...defaultProps, readOnly: true }} />
      </Provider>
    );

    const overrideCheckbox = getByLabelText(/I confirm that I wish to override\/discount risk factor\(s\)/i);
    const attestationCheckbox = getByLabelText(/I have answered to the best of my knowledge and mark this/i);

    // Check that checkboxes are disabled
    expect(overrideCheckbox).toBeDisabled();
    expect(attestationCheckbox).toBeDisabled
