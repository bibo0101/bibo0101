# Release Notes

## [Version 1.0.0] - 2025-01-06
### üÜï Added
- Implemented server-side pagination, filtering, and sorting using AG Grid.
- Added dynamic page size selector for data table customization.

### üêõ Fixed
- Fixed column alignment issues during resizing.
- Resolved filter state resetting unexpectedly during pagination.

### üîÑ Changed
- Improved data loading performance for large datasets.

### üîî Deprecated
- The `legacySorting` option will be removed in version 2.0.
------------------------------------------------------------------------
# Changelog

## [1.2.0] - 2025-01-06
### Added
- Support for server-side pagination, filtering, and sorting with AG Grid.
- Option to configure page size dynamically using props.

### Fixed
- Resolved column header misalignment during resizing.
- Fixed unexpected filter reset during pagination.

### Changed
- Improved loading performance for large datasets.

### Deprecated
- `legacySorting` property is now deprecated and will be removed in version 2.0.

---

## [1.1.0] - 2024-12-15
### Added
- Introduced client-side filtering and sorting.
- Added `loadingSpinner` to indicate data loading state.

### Fixed
- Addressed performance issues with large datasets.
----------------------------------------------------------
### Props

| Prop Name        | Type            | Default       | Description                              |
|------------------|-----------------|---------------|------------------------------------------|
| `columns`        | `Array`         | `[]`          | Array of column definitions.             |
| `rows`           | `Array`         | `[]`          | Array of data to display in the table.   |
| `pageSizeOptions`| `Array<number>` | `[10, 20]`    | Options for the page size selector.      |
| `defaultPageSize`| `number`        | `10`          | Default number of rows per page.         |
| `onRowClick`     | `Function`      | `null`        | Callback when a row is clicked.          |
------------------------------------------------------------------------------------------------------
Build and Deployment
Build Process:

Updated the build pipeline to use Nx workspace for optimized builds.
Bundled the data table component using Vite for faster performance.
The library is built as an ES module and CommonJS module to ensure compatibility with multiple environments.
Generated type declarations (*.d.ts) to support TypeScript projects.
Deployment:

Published the package to npm under the name @your-org/data-table.
Configured the deployment pipeline to automatically publish the package on successful builds in the main branch.
Added a pre-release script to validate build artifacts and perform linting and unit tests.

